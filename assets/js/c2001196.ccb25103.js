"use strict";(self.webpackChunkpendle_documentation=self.webpackChunkpendle_documentation||[]).push([[412],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),d=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=d(e.components);return a.createElement(s.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=d(n),m=o,h=c["".concat(s,".").concat(m)]||c[m]||u[m]||r;return n?a.createElement(h,i(i({ref:t},p),{},{components:n})):a.createElement(h,i({ref:t},p))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:o,i[1]=l;for(var d=2;d<r;d++)i[d]=n[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1402:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>d});var a=n(7462),o=(n(7294),n(3905));const r={hide_table_of_contents:!0},i="Advanced Operations using the SDK",l={unversionedId:"Developers/SDK/AdvancedSDKOps",id:"Developers/SDK/AdvancedSDKOps",title:"Advanced Operations using the SDK",description:"Overview",source:"@site/docs/Developers/SDK/AdvancedSDKOps.md",sourceDirName:"Developers/SDK",slug:"/Developers/SDK/AdvancedSDKOps",permalink:"/Developers/SDK/AdvancedSDKOps",draft:!1,tags:[],version:"current",frontMatter:{hide_table_of_contents:!0},sidebar:"myAutogeneratedSidebar",previous:{title:"PT and YT Trading",permalink:"/Developers/SDK/PTAndYTTrading"},next:{title:"Using Multicall",permalink:"/Developers/SDK/Multicall"}},s={},d=[{value:"Overview",id:"overview",level:2},{value:"The magic <code>method</code> parameter",id:"the-magic-method-parameter",level:2},{value:"<code>method</code> functionalities",id:"method-functionalities",level:2},{value:"<code>estimateGas</code> method",id:"estimategas-method",level:3},{value:"<code>send</code> method",id:"send-method",level:3},{value:"<code>callStatic</code> method",id:"callstatic-method",level:3},{value:"<code>multicallStatic</code> method",id:"multicallstatic-method",level:3},{value:"<code>populateTransaction</code> method",id:"populatetransaction-method",level:3},{value:"<code>extractParams</code> method",id:"extractparams-method",level:3},{value:"<code>meta-method</code> method",id:"meta-method-method",level:3}],p={toc:d},c="wrapper";function u(e){let{components:t,...n}=e;return(0,o.kt)(c,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"advanced-operations-using-the-sdk"},"Advanced Operations using the SDK"),(0,o.kt)("h2",{id:"overview"},"Overview"),(0,o.kt)("p",null,"The Pendle SDK is designed to not only make transaction, but also do a lot more such as getting gas estimation, getting parameters to call the corresponding contract, and even getting the intermediate calculation results. "),(0,o.kt)("p",null,"Here is how we can do it."),(0,o.kt)("h2",{id:"the-magic-method-parameter"},"The magic ",(0,o.kt)("inlineCode",{parentName:"h2"},"method")," parameter"),(0,o.kt)("p",null,"Suppose that we want to add liquidity to the ",(0,o.kt)("a",{parentName:"p",href:"https://app.pendle.finance/pro/pools/0xc374f7ec85f8c7de3207a10bb1978ba104bda3b2/zap/in?chain=ethereum"},"PT stETH Pool")," with 5 ETH. We can do so as follow."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { toAddress, BN, NATIVE_ADDRESS_0x00, Router } from '@pendle/sdk-v2';\nconst ETH_DECIMALS = 18n;\n\nconst marketAddress = toAddress('0xc374f7ec85f8c7de3207a10bb1978ba104bda3b2');\nconst tokenInAddress = NATIVE_ADDRESS_0x00;\nconst amountTokenIn = BN.from(5n * 10n ** ETH_DECIMALS);\nconst slippage = 0.2 / 100;\n\nconst router = Router.getRouter({\n    chainId: 1,\n    provider,\n    signer: testAccounts[0].wallet,\n});\n\nconst zapInTx = await router.addLiquiditySingleToken(\n    marketAddress,\n    tokenInAddress,\n    amountTokenIn,\n    slippage\n);\n\nawait zapInTx.wait();\n")),(0,o.kt)("p",null,"What if we want to estimate the gas consumption for this transaction. You can\npass in ",(0,o.kt)("inlineCode",{parentName:"p"},"{ method: 'estimateGas' }")," as an additional parameter:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const estimatedGasConsumption = await router.addLiquiditySingleToken(\n    marketAddress,\n    tokenInAddress,\n    amountTokenIn,\n    slippage,\n    { method: 'estimateGas'}  // <---------------- additional parameter here\n);\n\nconsole.log({ estimatedGasConsumption });\n")),(0,o.kt)("p",null,"Output:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'{ estimatedGasConsumption: BigNumber { value: "439265" } }\n')),(0,o.kt)("p",null,"Please note that ",(0,o.kt)("inlineCode",{parentName:"p"},"estimatedGasConsumption")," will have the type ",(0,o.kt)("inlineCode",{parentName:"p"},"BN")," instead of Ethers.js ",(0,o.kt)("a",{parentName:"p",href:"https://docs.ethers.org/v5/api/providers/types/#roviders-TransactionResponse"},"ContractTransaction"),". That is, ",(0,o.kt)("strong",{parentName:"p"},"the return type is tied to\n",(0,o.kt)("inlineCode",{parentName:"strong"},"method")),".  You can pass in the additional ",(0,o.kt)("inlineCode",{parentName:"p"},"{ method }")," in most of the ",(0,o.kt)("a",{parentName:"p",href:"https://pendle-finance.github.io/pendle-sdk-core-v2-public/classes/Router.html"},"Pendle\nSDK Router")," functions, and they will work as you expected."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"method")," parameter is also ",(0,o.kt)("strong",{parentName:"p"},"typed"),". It cannot be an arbitrary string, but should be one of the following value in the union ",(0,o.kt)("a",{parentName:"p",href:"https://pendle-finance.github.io/pendle-sdk-core-v2-public/types/MetaMethodType.html"},"MetaMethodType"),". Typescript compiler will ensure that you will not pass in a wrong value."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'type MetaMethodType = \n    | "estimateGas"\n    | "send"\n    | "callStatic"\n    | "multicallStatic";\n    | "populateTransaction"\n    | "extractParams"\n    | "meta-method"\n')),(0,o.kt)("h2",{id:"method-functionalities"},(0,o.kt)("inlineCode",{parentName:"h2"},"method")," functionalities"),(0,o.kt)("p",null,"Let's explore the functionalities of each ",(0,o.kt)("inlineCode",{parentName:"p"},"method"),"."),(0,o.kt)("h3",{id:"estimategas-method"},(0,o.kt)("inlineCode",{parentName:"h3"},"estimateGas")," method"),(0,o.kt)("p",null,"We have demonstrated this method above."),(0,o.kt)("h3",{id:"send-method"},(0,o.kt)("inlineCode",{parentName:"h3"},"send")," method"),(0,o.kt)("p",null,"This one is the default ",(0,o.kt)("inlineCode",{parentName:"p"},"method"),". That is, if ",(0,o.kt)("inlineCode",{parentName:"p"},"method")," is not passed in,\nthe function will make an transaction."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const zapInTxWithSendMethod = await router.addLiquiditySingleToken(\n    marketAddress,\n    tokenInAddress,\n    amountTokenIn,\n    slippage,\n    { method: 'send' }\n);\n\nawait zapInTxWithSendMethod.wait();\n")),(0,o.kt)("p",null,"The result will have the type of ",(0,o.kt)("a",{parentName:"p",href:"https://docs.ethers.org/v5/api/providers/types/#roviders-TransactionResponse"},"ContractTransaction"),"."),(0,o.kt)("h3",{id:"callstatic-method"},(0,o.kt)("inlineCode",{parentName:"h3"},"callStatic")," method"),(0,o.kt)("p",null,"This method will return the result of the contract call, just like doing ",(0,o.kt)("inlineCode",{parentName:"p"},"callStatic"),"\ninstead of ",(0,o.kt)("inlineCode",{parentName:"p"},"send"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const callStaticResult = await router.addLiquiditySingleToken(\n    marketAddress,\n    tokenInAddress,\n    amountTokenIn,\n    slippage,\n    { method: 'callStatic' }\n);\n\nconsole.log(callStaticResult);\n")),(0,o.kt)("p",null,"Output:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'[\n  BigNumber { value: "2471697719857768456" },\n  BigNumber { value: "2141459137246729" },\n  netLpOut: BigNumber { value: "2471697719857768456" },\n  netSyFee: BigNumber { value: "2141459137246729" }\n]\n')),(0,o.kt)("p",null,"The return type of the function with ",(0,o.kt)("inlineCode",{parentName:"p"},"callStatic")," method will have the return type of the corresponding contract. In this case, the function calls the ",(0,o.kt)("a",{parentName:"p",href:"https://etherscan.io/address/0x0000000001e4ef00d069e71d6ba041b0a16f7ea0#code"},"RouterContract")," method ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/pendle-finance/pendle-core-v2-public/blob/310bcc9e419b2122eaf65fd283f809023ceddae6/contracts/router/ActionAddRemoveLiq.sol#L209"},"pendle-contract-addLiquiditySingleToken"),"."),(0,o.kt)("h3",{id:"multicallstatic-method"},(0,o.kt)("inlineCode",{parentName:"h3"},"multicallStatic")," method"),(0,o.kt)("p",null,"Coming soon."),(0,o.kt)("h3",{id:"populatetransaction-method"},(0,o.kt)("inlineCode",{parentName:"h3"},"populateTransaction")," method"),(0,o.kt)("p",null,"If you want to get the populated transaction before sending, you can do as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const populatedTransaction = await router.addLiquiditySingleToken(\n    marketAddress,\n    tokenInAddress,\n    amountTokenIn,\n    slippage,\n    { method: 'populateTransaction' }\n);\n\nconsole.log(populatedTransaction);\n")),(0,o.kt)("p",null,"Output:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"{\n  data: '0x015491d1000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266000000000000000000000000c374f7ec85f8c7de3207a10bb1978ba104bda3b2000000000000000000000000000000000000000000000000224471bc9304336d0000000000000000000000000000000000000000000000000e868ce4726f1fd20000000000000000000000000000000000000000000000000eb3432bf079b1e70000000000000000000000000000000000000000000000000e8e009b0770e2d6000000000000000000000000000000000000000000000000000000000000000700000000000000000000000000000000000000000000000000038d7ea4c68000000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004563918244f4000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  to: '0x0000000001E4ef00d069e71d6bA041b0A16F7eA0',\n  from: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\n  value: BigNumber { value: \"5000000000000000000\" }\n}\n")),(0,o.kt)("p",null,"The return type will be Ethers.js ",(0,o.kt)("a",{parentName:"p",href:"https://docs.ethers.org/v5/api/providers/types/#roviders-TransactionResponse"},"TransactionResponse")),(0,o.kt)("h3",{id:"extractparams-method"},(0,o.kt)("inlineCode",{parentName:"h3"},"extractParams")," method"),(0,o.kt)("p",null,"If you want to get the parameters for contract call, you can do as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const paramsForContract = await router.addLiquiditySingleToken(\n    marketAddress,\n    tokenInAddress,\n    amountTokenIn,\n    slippage,\n    { method: 'extractParams' }\n);\n\nconsole.log(paramsForContract);\n")),(0,o.kt)("p",null,"Output:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"[\n  '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n  '0xc374f7ec85f8c7de3207a10bb1978ba104bda3b2',\n  BigNumber { value: \"2469223550440190829\" },\n  {\n    guessMin: BigNumber { value: \"1046678876210536402\" },\n    guessMax: BigNumber { value: \"1059264193359360487\" },\n    guessOffchain: BigNumber { value: \"1048776429068673750\" },\n    maxIteration: 7,\n    eps: '1000000000000000'\n  },\n  {\n    tokenIn: '0x0000000000000000000000000000000000000000',\n    netTokenIn: BigNumber { value: \"5000000000000000000\" },\n    tokenMintSy: '0x0000000000000000000000000000000000000000',\n    bulk: '0x0000000000000000000000000000000000000000',\n    pendleSwap: '0x0000000000000000000000000000000000000000',\n    swapData: {\n      swapType: 0,\n      extRouter: '0x0000000000000000000000000000000000000000',\n      extCalldata: [],\n      needScale: false\n    }\n  },\n  { value: BigNumber { value: \"5000000000000000000\" } }\n]\n")),(0,o.kt)("p",null,"The return type will be a tuple, which is the list of parameters to be passed to the corresponding contract if you are using Ethers.js. Note that the ",(0,o.kt)("inlineCode",{parentName:"p"},"overrides")," field is also returned. In this case, the function calls the ",(0,o.kt)("a",{parentName:"p",href:"https://etherscan.io/address/0x0000000001e4ef00d069e71d6ba041b0a16f7ea0#code"},"RouterContract")," method ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/pendle-finance/pendle-core-v2-public/blob/310bcc9e419b2122eaf65fd283f809023ceddae6/contracts/router/ActionAddRemoveLiq.sol#L209"},"pendle-contract-addLiquiditySingleToken"),"."),(0,o.kt)("h3",{id:"meta-method-method"},(0,o.kt)("inlineCode",{parentName:"h3"},"meta-method")," method"),(0,o.kt)("p",null,"This is a powerful method of the Pendle SDK."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const metaMethod = await router.addLiquiditySingleToken(\n    marketAddress,\n    tokenInAddress,\n    amountTokenIn,\n    slippage,\n    { method: 'meta-method' }\n);\n")),(0,o.kt)("p",null,"The result of the function with ",(0,o.kt)("inlineCode",{parentName:"p"},"meta-method")," method will be ",(0,o.kt)("a",{parentName:"p",href:"https://pendle-finance.github.io/pendle-sdk-core-v2-public/classes/ContractMetaMethod.html"},"ContractMetaMethod"),". This object hold the intermediate calculation result, as well as do many other things."),(0,o.kt)("p",null,"The intermediate calculation result can obtained via ",(0,o.kt)("inlineCode",{parentName:"p"},".data")," property."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const { netLpOut, priceImpact } = metaMethod.data;\nconsole.log({ netLpOut, priceImpact });\n")),(0,o.kt)("p",null,"Output:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'{\n  netLpOut: BigNumber { value: "2471697719857768456" },\n  priceImpact: BigNumber { value: "28624434279032" }\n}\n')),(0,o.kt)("p",null,"This property is also ",(0,o.kt)("strong",{parentName:"p"},"typed"),". You can refer to the API reference to see the type of ",(0,o.kt)("inlineCode",{parentName:"p"},".data"),".\nFor this function, please see ",(0,o.kt)("a",{parentName:"p",href:"https://pendle-finance.github.io/pendle-sdk-core-v2-public/classes/Router.html#addLiquiditySingleToken"},"Router#addLiquiditySingleToken"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'addLiquiditySingleToken<T>(market, tokenIn, netTokenIn, slippage, _params?):\n    RouterMetaMethodReturnType<\n        T, "addLiquiditySingleToken",\n        BaseZapInRouteData & {\n            exchangeRateAfter: BN;\n            minLpOut: BN;\n            netLpOut: BN;\n            netPtFromSwap: BN;\n            netSyFee: BN;\n            netSyMinted: BN;\n            netSyToSwap: BN;\n            priceImpact: BN;\n            route: AddLiquiditySingleTokenRoute<T>;\n        }\n    >\n')),(0,o.kt)("p",null,"The property ",(0,o.kt)("inlineCode",{parentName:"p"},"metaMethod.data")," will have the type:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"    BaseZapInRouteData & {\n        exchangeRateAfter: BN;\n        minLpOut: BN;\n        netLpOut: BN;\n        netPtFromSwap: BN;\n        netSyFee: BN;\n        netSyMinted: BN;\n        netSyToSwap: BN;\n        priceImpact: BN;\n        route: AddLiquiditySingleTokenRoute<T>;\n    }\n")),(0,o.kt)("p",null,"With this, you can additional information, such as ",(0,o.kt)("inlineCode",{parentName:"p"},"priceImpact")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"exchangeRateAfter"),"."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"metaMethod")," is also ",(0,o.kt)("em",{parentName:"p"},"packed")," with all of the above methods. That is, ",(0,o.kt)("inlineCode",{parentName:"p"},"metaMethod")," can be used\nto send transaction, estimate gas, extract parameters, etc. ",(0,o.kt)("strong",{parentName:"p"},"WITHOUT")," any recalculation."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"{\n    const callStaticResult = await metaMethod.callStatic();\n    const gasEstimation = await metaMethod.estimateGas();\n    const extractedParams = await metaMethod.extractParams();\n    console.log({ callStaticResult, gasEstimation, extractedParams });\n\n    const tx = await metaMethod.send();\n    await tx.wait();\n}\n")),(0,o.kt)("p",null,"Output:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'{\n  callStaticResult: [\n    BigNumber { value: "2471697719857768456" },\n    BigNumber { value: "2141459137246729" },\n    netLpOut: BigNumber { value: "2471697719857768456" },\n    netSyFee: BigNumber { value: "2141459137246729" }\n  ],\n  gasEstimation: BigNumber { value: "439253" },\n  extractedParams: [\n    \'0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266\',\n    \'0xc374f7ec85f8c7de3207a10bb1978ba104bda3b2\',\n    BigNumber { value: "2469223550440190829" },\n    {\n      guessMin: BigNumber { value: "1046678876210536402" },\n      guessMax: BigNumber { value: "1059264193359360487" },\n      guessOffchain: BigNumber { value: "1048776429068673750" },\n      maxIteration: 7,\n      eps: \'1000000000000000\'\n    },\n    {\n      tokenIn: \'0x0000000000000000000000000000000000000000\',\n      netTokenIn: BigNumber { value: "5000000000000000000" },\n      tokenMintSy: \'0x0000000000000000000000000000000000000000\',\n      bulk: \'0x0000000000000000000000000000000000000000\',\n      pendleSwap: \'0x0000000000000000000000000000000000000000\',\n      swapData: [Object]\n    },\n    { value: BigNumber { value: "5000000000000000000" } }\n  ]\n}\n')))}u.isMDXComponent=!0}}]);