"use strict";(self.webpackChunkpendle_documentation=self.webpackChunkpendle_documentation||[]).push([[1346],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>k});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),p=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},d=function(e){var n=p(e.components);return r.createElement(l.Provider,{value:n},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),c=p(t),m=a,k=c["".concat(l,".").concat(m)]||c[m]||u[m]||o;return t?r.createElement(k,i(i({ref:n},d),{},{components:t})):r.createElement(k,i({ref:n},d))}));function k(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=m;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[c]="string"==typeof e?e:a,i[1]=s;for(var p=2;p<o;p++)i[p]=t[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},2318:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var r=t(7462),a=(t(7294),t(3905));const o={hide_table_of_contents:!0},i="Types and Functions",s={unversionedId:"Developers/SDK/TypesAndFunctions",id:"Developers/SDK/TypesAndFunctions",title:"Types and Functions",description:"Overview",source:"@site/docs/Developers/SDK/TypesAndFunctions.md",sourceDirName:"Developers/SDK",slug:"/Developers/SDK/TypesAndFunctions",permalink:"/Developers/SDK/TypesAndFunctions",draft:!1,tags:[],version:"current",frontMatter:{hide_table_of_contents:!0},sidebar:"myAutogeneratedSidebar",previous:{title:"Error Handling",permalink:"/Developers/SDK/ErrorHandling"},next:{title:"Arbitrary Tokens with Pendle SDK Router",permalink:"/Developers/SDK/ArbitraryTokens"}},l={},p=[{value:"Overview",id:"overview",level:2},{value:"External Types and Functions",id:"external-types-and-functions",level:2},{value:"Types",id:"types",level:2},{value:"type <code>Address</code>",id:"type-address",level:3},{value:"type <code>ChainId</code>",id:"type-chainid",level:3},{value:"type <code>MainchainId</code>",id:"type-mainchainid",level:3},{value:"type <code>NetworkConnection</code>",id:"type-networkconnection",level:3},{value:"function <code>copyNetworkConnection(..)</code>",id:"function-copynetworkconnection",level:3},{value:"Functions",id:"functions",level:2},{value:"function <code>toAddress(...)</code>",id:"function-toaddress",level:3},{value:"function <code>areSameAddresses(...)</code>",id:"function-aresameaddresses",level:3},{value:"function <code>isMainchain(...)</code>",id:"function-ismainchain",level:3}],d={toc:p},c="wrapper";function u(e){let{components:n,...t}=e;return(0,a.kt)(c,(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"types-and-functions"},"Types and Functions"),(0,a.kt)("h2",{id:"overview"},"Overview"),(0,a.kt)("p",null,"Here are some small but useful types and functions used across places in the Pendle SDK."),(0,a.kt)("h2",{id:"external-types-and-functions"},"External Types and Functions"),(0,a.kt)("p",null,"We use some external packages, mainly ",(0,a.kt)("inlineCode",{parentName:"p"},"Ethers.js"),". So before reading further, please be sure that you are familiar with them first."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import type { providers, Signer } from 'ethers';\n\ntype Provider = providers.Provider;\n\n// these are exported to @pendle/sdk-v2\n// export { BigNumber as BN, BigNumberish } from 'ethers';\n")),(0,a.kt)("h2",{id:"types"},"Types"),(0,a.kt)("h3",{id:"type-address"},"type ",(0,a.kt)("inlineCode",{parentName:"h3"},"Address")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { Address } from '@pendle/sdk-v2';\n")),(0,a.kt)("p",null,"Please refer to ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/pendle-finance/pendle-sdk-core-v2-public/blob/main/src/common/Address.ts"},"Address API reference"),"."),(0,a.kt)("p",null,"This type is defined to avoid using raw string as address. The address returned by a contract call often have mixed cases, which sometimes causes bug in comparison."),(0,a.kt)("p",null,"This type is an ",(0,a.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Opaque_data_type"},"Opaque")," type with the help of a private unique symbol. Similar implementation can be found in popular libraries such as ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/ts-essentials/ts-essentials/tree/master/lib/opaque"},"ts-essentials"),". We implemented our own, as the generated documentation and the IDE intellisense are nicer than using the library."),(0,a.kt)("h3",{id:"type-chainid"},"type ",(0,a.kt)("inlineCode",{parentName:"h3"},"ChainId")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { ChainId } from '@pendle/sdk-v2';\n\ntype ChainId = 1 | 43113 | 80001 | 43114;\n")),(0,a.kt)("p",null,"This type is a union of the chains\u2019 IDs that are supported by Pendle."),(0,a.kt)("h3",{id:"type-mainchainid"},"type ",(0,a.kt)("inlineCode",{parentName:"h3"},"MainchainId")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { MainchainId } from '@pendle/sdk-v2';\n\ntype MainchainId = 1 | 43113;\n")),(0,a.kt)("p",null,"This type is a union of the main chains\u2019 IDs that are supported by Pendle."),(0,a.kt)("h3",{id:"type-networkconnection"},"type ",(0,a.kt)("inlineCode",{parentName:"h3"},"NetworkConnection")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { NetworkConnection } from '@pendle/sdk-v2';\n\nexport type NetworkConnection =\n    | { provider: Provider; signer?: undefined }\n    | { provider?: undefined; signer: Signer }\n    | { provider: Provider; signer: Signer };\n")),(0,a.kt)("p",null,"This type looks complicated, but it actually has only two fields:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"provider: Provider")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"signer: Signer"))),(0,a.kt)("p",null,"It is written in such way so that one of the fields can be omitted, ",(0,a.kt)("strong",{parentName:"p"},"but not both!")," Also, we strongly recommend using ",(0,a.kt)("inlineCode",{parentName:"p"},"tsc")," with ",(0,a.kt)("inlineCode",{parentName:"p"},"strict")," mode."),(0,a.kt)("p",null,"Example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { Wallet } from 'ethers';\nimport { provider } from './sdk-doc-playground.mjs';\n\nconst signer = Wallet.createRandom();\n\n// ok examples\nconst nc1: NetworkConnection = { provider };\nconst nc2: NetworkConnection = { signer };\nconst nc3: NetworkConnection = { provider, signer };\n\n// not ok example\n// const nc4: NetworkConnection = {};\n")),(0,a.kt)("h3",{id:"function-copynetworkconnection"},"function ",(0,a.kt)("inlineCode",{parentName:"h3"},"copyNetworkConnection(..)")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { copyNetworkConnection } from '@pendle/sdk-v2';\n\nexport function copyNetworkConnection(networkConnection: NetworkConnection): NetworkConnection;\n")),(0,a.kt)("p",null,"This function ",(0,a.kt)("strong",{parentName:"p"},"only")," copies the ",(0,a.kt)("inlineCode",{parentName:"p"},"provide")," and the ",(0,a.kt)("inlineCode",{parentName:"p"},"signer")," fields of the input object."),(0,a.kt)("p",null,"Example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const nc5 = { provider, aRandomField: 'foo' };\nconst nc6 = copyNetworkConnection(nc5);\n// Print the keys of nc2\nconsole.log(Object.keys(nc6));\n")),(0,a.kt)("p",null,"Output:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"[ 'provider', 'signer' ]\n")),(0,a.kt)("h2",{id:"functions"},"Functions"),(0,a.kt)("h3",{id:"function-toaddress"},"function ",(0,a.kt)("inlineCode",{parentName:"h3"},"toAddress(...)")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { toAddress } from '@pendle/sdk-v2';\n\nfunction toAddress(rawAddress: string): Address\n")),(0,a.kt)("p",null,"Cast a rawAddress to the ",(0,a.kt)("inlineCode",{parentName:"p"},"Address")," type. This function ",(0,a.kt)("strong",{parentName:"p"},"does not")," validate the ",(0,a.kt)("inlineCode",{parentName:"p"},"rawAddress")," string. The resulting ",(0,a.kt)("inlineCode",{parentName:"p"},"Address")," will be transformed to lowercase."),(0,a.kt)("h3",{id:"function-aresameaddresses"},"function ",(0,a.kt)("inlineCode",{parentName:"h3"},"areSameAddresses(...)")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { areSameAddresses } from '@pendle/sdk-v2';\n\nfunction areSameAddresses(address1: Address, address2: Address): boolean;\n")),(0,a.kt)("p",null,"Check if two addresses are the same, by comparing them in ",(0,a.kt)("strong",{parentName:"p"},"lowercase"),"."),(0,a.kt)("p",null,"With the current ",(0,a.kt)("inlineCode",{parentName:"p"},"Address")," type, addresses can also be compared directly with the ",(0,a.kt)("inlineCode",{parentName:"p"},"===")," operator. This function was used before having the ",(0,a.kt)("inlineCode",{parentName:"p"},"Address")," type, but it is still nice to have."),(0,a.kt)("h3",{id:"function-ismainchain"},"function ",(0,a.kt)("inlineCode",{parentName:"h3"},"isMainchain(...)")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { isMainchain } from '@pendle/sdk-v2';\n\nexport function isMainchain(chainId: ChainId): chainId is MainchainId;\n")),(0,a.kt)("p",null,"Check if a ",(0,a.kt)("inlineCode",{parentName:"p"},"ChainId")," is a ",(0,a.kt)("inlineCode",{parentName:"p"},"MainchainId"),"."),(0,a.kt)("p",null,"Example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"console.log(isMainchain(1));\n\nconsole.log(isMainchain(43113));\n")),(0,a.kt)("p",null,"Output:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"true\ntrue\n")))}u.isMDXComponent=!0}}]);