"use strict";(self.webpackChunkpendle_documentation=self.webpackChunkpendle_documentation||[]).push([[6619],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>h});var a=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var c=a.createContext({}),s=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},d=function(e){var t=s(e.components);return a.createElement(c.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,o=e.originalType,c=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),p=s(n),m=l,h=p["".concat(c,".").concat(m)]||p[m]||u[m]||o;return n?a.createElement(h,r(r({ref:t},d),{},{components:n})):a.createElement(h,r({ref:t},d))}));function h(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var o=n.length,r=new Array(o);r[0]=m;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[p]="string"==typeof e?e:l,r[1]=i;for(var s=2;s<o;s++)r[s]=n[s];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},109:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>s});var a=n(7462),l=(n(7294),n(3905));const o={hide_table_of_contents:!0},r="ERC20 Interaction with Pendle SDK",i={unversionedId:"Developers/SDK/ERC20Interaction",id:"Developers/SDK/ERC20Interaction",title:"ERC20 Interaction with Pendle SDK",description:"Overview",source:"@site/docs/Developers/SDK/ERC20Interaction.md",sourceDirName:"Developers/SDK",slug:"/Developers/SDK/ERC20Interaction",permalink:"/cn/Developers/SDK/ERC20Interaction",draft:!1,tags:[],version:"current",frontMatter:{hide_table_of_contents:!0}},c={},s=[{value:"Overview",id:"overview",level:2},{value:"Preparation",id:"preparation",level:2},{value:"ERC20 Entity Creation",id:"erc20-entity-creation",level:2},{value:"Read-only Functions",id:"read-only-functions",level:2},{value:"Multicall Support",id:"multicall-support",level:2},{value:"Passing multicall to entity constructor",id:"passing-multicall-to-entity-constructor",level:3},{value:"Passing multicall to the methods",id:"passing-multicall-to-the-methods",level:3},{value:"Write Functions",id:"write-functions",level:2},{value:"Meta-methods",id:"meta-methods",level:2},{value:"<code>callStatic</code> meta-method",id:"callstatic-meta-method",level:3},{value:"<code>multicallStatic</code> meta-method",id:"multicallstatic-meta-method",level:3},{value:"<code>estimateGas</code> meta-method",id:"estimategas-meta-method",level:3},{value:"<code>meta-method</code> meta-method",id:"meta-method-meta-method",level:3},{value:"Other Functionalities",id:"other-functionalities",level:2},{value:"Passing Ethers <code>Overrides</code> to the method calls",id:"passing-ethers-overrides-to-the-method-calls",level:3},{value:"The Inner Contract",id:"the-inner-contract",level:3},{value:"Setting the ABI",id:"setting-the-abi",level:3}],d={toc:s},p="wrapper";function u(e){let{components:t,...n}=e;return(0,l.kt)(p,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"erc20-interaction-with-pendle-sdk"},"ERC20 Interaction with Pendle SDK"),(0,l.kt)("h2",{id:"overview"},"Overview"),(0,l.kt)("p",null,"There are a few kinds of entities in Pendle SDK, and ERC20 is one of them. The\nentities have similar functionalities, and ERC20 is the most straightforward\nand common entity. So let\u2019s take a look at Pendle SDK\u2019s functionalities with\nERC20."),(0,l.kt)("h2",{id:"preparation"},"Preparation"),(0,l.kt)("p",null,"Let\u2019s say we want to interact with the USDC contract on Ethereum. USDC contract\nhas address\n",(0,l.kt)("a",{parentName:"p",href:"https://etherscan.io/address/0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48"},(0,l.kt)("inlineCode",{parentName:"a"},"0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48")),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const USDCAddress = '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48';\n")),(0,l.kt)("p",null,"To communicate with the contract, we also need two things:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"A provider and/or signer."),(0,l.kt)("li",{parentName:"ul"},"Some accounts with filled balance.")),(0,l.kt)("p",null,"We have already prepared a module called ",(0,l.kt)("a",{parentName:"p",href:"/cn/Developers/SDK/Playground"},"playground")," to provide these things. Let's import them!"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"import { provider, testAccounts } from './playground.mjs';\nconst [Alice, Bob] = testAccounts;\n\nconsole.log(\"Alice's address: \", Alice.address);\nconsole.log(\"Bob's address: \", Bob.address);\n")),(0,l.kt)("p",null,"Output:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"Alice's address:  0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266\nBob's address:  0x70997970c51812dc3a010c7d01b50e0d17dc79c8\n")),(0,l.kt)("p",null,"Here, we will only use 2 test accounts. There are totally 10 accounts in ",(0,l.kt)("inlineCode",{parentName:"p"},"testAccounts"),", all of them has 1000 ETH, as well as some balance on various assets, such as USDC, USDT, etc. We'll demonstrate how to get the balance of these accounts shortly."),(0,l.kt)("h2",{id:"erc20-entity-creation"},"ERC20 Entity Creation"),(0,l.kt)("p",null,"Pendle ERC20 Entity can be constructed as follows:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"import { ERC20Entity } from '@pendle/sdk-v2';\n\n// ERC20 entity with read-only functionalities\nconst readonlyErc20 = new ERC20Entity(USDCAddress, { provider });\n\n// ERC20 entity with read-write functionalities\nconst readWriteErc20 = new ERC20Entity(USDCAddress, { signer: Alice.wallet });\n")),(0,l.kt)("p",null,"Other entities of Pendle SDK have roughly the same constructor signature: "),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"the contract address,"),(0,l.kt)("li",{parentName:"ul"},"the entity configuration, including the network connection.")),(0,l.kt)("p",null,"The network connection parameter inside the entity configuration should be an object that has either the property provider: ",(0,l.kt)("inlineCode",{parentName:"p"},"ethers.providers.Provider"),", or ",(0,l.kt)("inlineCode",{parentName:"p"},"signer: ethers.Signer"),". Pass signer if all contract functionalities are required. Otherwise, just pass in a provider. If both provider and signer are presented, the signer must be connected to the passed-in provider (an error will be thrown otherwise)."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"import { Wallet } from 'ethers';\nconst unconnectedWallet = Wallet.createRandom();\nconst connectedWallet = unconnectedWallet.connect(provider);\n\nconst contractAddress = USDCAddress;\n\n// The following constructions work fine\nnew ERC20Entity(contractAddress, { provider });\nnew ERC20Entity(contractAddress, { signer: connectedWallet });\nnew ERC20Entity(contractAddress, { signer: unconnectedWallet });\nnew ERC20Entity(contractAddress, { provider, signer: connectedWallet });\n\n// The following construction will throw an error\ntry {\n    new ERC20Entity(contractAddress, { provider, signer: unconnectedWallet }); // Error\n} catch (e) {\n    console.log('Got error');\n    console.log(e);\n}\n")),(0,l.kt)("p",null,"Output:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"PendleSdkError: For contract creation, networkConnection.provider should be the same as networkConnection.signer.provider\n    at createContractObject (/home/darkkcyan/projects/pendle-sdk-core-v2-docs/node_modules/@pendle/sdk-v2/src/contracts/createContractObject.ts:192:15)\n    at new PendleEntity (/home/darkkcyan/projects/pendle-sdk-core-v2-docs/node_modules/@pendle/sdk-v2/src/entities/PendleEntity.ts:61:26)\n    at new ERC20Entity (/home/darkkcyan/projects/pendle-sdk-core-v2-docs/node_modules/@pendle/sdk-v2/src/entities/erc20/ERC20Entity.ts:41:9)\n    at file:///home/darkkcyan/projects/pendle-sdk-core-v2-docs/temp-dir/docs/1.erc20-tutorial.mts:72:5\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)\n\n")),(0,l.kt)("h2",{id:"read-only-functions"},"Read-only Functions"),(0,l.kt)("p",null,"An ",(0,l.kt)("inlineCode",{parentName:"p"},"ERC20")," has the following read-only functions:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function name() public view returns (string);\nfunction symbol() public view returns (string);\nfunction decimals() public view returns (uint8);\nfunction totalSupply() public view returns (uint256);\nfunction balanceOf(address _owner) public view returns (uint256 balance);\nfunction allowance(address _owner, address _spender) public view returns (uint256 remaining);\n")),(0,l.kt)("p",null,"You can use these functions similarly to calling them in a contract:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"import { Address } from '@pendle/sdk-v2';\n\nasync function getErc20Info(erc20: ERC20Entity) {\n    const name = await erc20.name();\n    const symbol = await erc20.symbol();\n    const decimals = await erc20.decimals();\n    const totalSupply = await erc20.totalSupply();\n    const AliceBalance = await erc20.balanceOf(Alice.address);\n    const BobBalance = await erc20.balanceOf(Bob.address);\n\n    return { name, symbol, decimals, totalSupply, AliceBalance, BobBalance };\n}\n\nconsole.log(await getErc20Info(readonlyErc20));\n")),(0,l.kt)("p",null,"Output:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},'{\n  name: \'USD Coin\',\n  symbol: \'USDC\',\n  decimals: 6,\n  totalSupply: BigNumber { value: "35706426357059550" },\n  AliceBalance: BigNumber { value: "1000000000" },\n  BobBalance: BigNumber { value: "1000000000" }\n}\n')),(0,l.kt)("p",null,"We can also get allowance as well, though the allowance is a bit ",(0,l.kt)("em",{parentName:"p"},"boring"),", as Alice and Bob didn't approve each other yet. We'll show how to approve shortly."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},'console.log("Bob\'s allowance from Alice: ", await readonlyErc20.allowance(Alice.address, Bob.address));\n')),(0,l.kt)("p",null,"Output:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},'Bob\'s allowance from Alice:  BigNumber { value: "0" }\n\n')),(0,l.kt)("p",null,"The function ",(0,l.kt)("inlineCode",{parentName:"p"},"readonlyFunctionsExample")," sends the calls ",(0,l.kt)("em",{parentName:"p"},"sequentially"),". To send the all the calls to the provider at the same time, use ",(0,l.kt)("inlineCode",{parentName:"p"},"Promise.all"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"async function readonlyFunctionExamplePromiseAll(erc20: ERC20Entity) {\n    const [name, symbol, decimals, totalSupply, AliceBalance] = await Promise.all([\n        erc20.name(),\n        erc20.symbol(),\n        erc20.decimals(),\n        erc20.totalSupply(),\n        erc20.balanceOf(Alice.address),\n    ]);\n    return { name, symbol, decimals, totalSupply, AliceBalance };\n}\n\nconsole.log(await readonlyFunctionExamplePromiseAll(readonlyErc20));\n")),(0,l.kt)("p",null,"Output:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"{\n  name: 'USD Coin',\n  symbol: 'USDC',\n  decimals: 6,\n  totalSupply: BigNumber { value: \"35706426357059550\" },\n  AliceBalance: BigNumber { value: \"1000000000\" }\n}\n\n")),(0,l.kt)("h2",{id:"multicall-support"},"Multicall Support"),(0,l.kt)("p",null,"Pendle SDK supports calling read-only functions with ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/makerdao/multicall"},"Multicall"),"\nfrom MakerDAO. Multicall is the preferred way to call multiple contract methods at once to reduce the round trips over the network. To use multicall, first create a Multicall instance as follows:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"import { Multicall } from '@pendle/sdk-v2';\n\nconst multicall = new Multicall({ chainId: 1, provider });\n")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"chainId")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"provider")," are the required parameters. The ",(0,l.kt)("inlineCode",{parentName:"p"},"chainId")," is ",(0,l.kt)("inlineCode",{parentName:"p"},"1"),", as we are querying the Ethereum network. There is one more optional parameters:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"callLimit: number")," (default: ",(0,l.kt)("inlineCode",{parentName:"li"},"64"),"), the maximum number of calls per multicall request.")),(0,l.kt)("h3",{id:"passing-multicall-to-entity-constructor"},"Passing multicall to entity constructor"),(0,l.kt)("p",null,"ERC20 entity's contractor\u2019s third parameter also accept multicall. You can pass in ",(0,l.kt)("inlineCode",{parentName:"p"},"multicall")," to ERC20 as follows:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const readonlyErc20WithMulticall = new ERC20Entity(USDCAddress, { provider, multicall });\n")),(0,l.kt)("p",null,"After that, you can use it as in ",(0,l.kt)("inlineCode",{parentName:"p"},"readonlyFunctionExamplePromiseAll"),", and Pendle\nSDK will handle the batching for you:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"console.log(await readonlyFunctionExamplePromiseAll(readonlyErc20WithMulticall));\n")),(0,l.kt)("p",null,"Output:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"{\n  name: 'USD Coin',\n  symbol: 'USDC',\n  decimals: 6,\n  totalSupply: BigNumber { value: \"35706426357059550\" },\n  AliceBalance: BigNumber { value: \"1000000000\" }\n}\n")),(0,l.kt)("p",null,"Note that ",(0,l.kt)("inlineCode",{parentName:"p"},"readonlyFunctionsExample")," will not work with multicall, as the methods are called sequentially. If used with an ERC20 entity that is initialized with a multicall instance, each call will be a multicall request with a single call inside instead!"),(0,l.kt)("h3",{id:"passing-multicall-to-the-methods"},"Passing multicall to the methods"),(0,l.kt)("p",null,"If an ERC20 entity was not initialized with ",(0,l.kt)("inlineCode",{parentName:"p"},"multicall"),", it can still be called with multicall by passing the ",(0,l.kt)("inlineCode",{parentName:"p"},"multicall")," instance to the methods as the last parameter:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"async function readonlyFunctionExample_multicallToMethods(erc20: ERC20Entity, multicall?: Multicall) {\n    const [name, symbol, decimals, totalSupply, AliceBalance, BobBalance] = await Promise.all([\n        erc20.name({ multicall }),\n        erc20.symbol({ multicall }),\n        erc20.decimals({ multicall }),\n        erc20.totalSupply({ multicall }),\n        erc20.balanceOf(Alice.address, { multicall }),\n        erc20.balanceOf(Bob.address, { multicall }),\n    ]);\n    return { name, symbol, decimals, totalSupply, AliceBalance, BobBalance };\n}\n\nconsole.log(await readonlyFunctionExample_multicallToMethods(readonlyErc20WithMulticall, multicall));\n")),(0,l.kt)("p",null,"Output:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},'{\n  name: \'USD Coin\',\n  symbol: \'USDC\',\n  decimals: 6,\n  totalSupply: BigNumber { value: "35706426357059550" },\n\n  AliceBalance: BigNumber { value: "1000000000" },\n  BobBalance: BigNumber { value: "1000000000" }\n}\n\n')),(0,l.kt)("p",null,"Again, Pendle SDK will handle all the batching. And also ",(0,l.kt)("inlineCode",{parentName:"p"},"readonlyFunctionsExample")," will also not work for the same reason as above."),(0,l.kt)("p",null,"When ",(0,l.kt)("inlineCode",{parentName:"p"},"multicall")," parameter is ",(0,l.kt)("inlineCode",{parentName:"p"},"undefined"),", it will have the same effect as ",(0,l.kt)("inlineCode",{parentName:"p"},"readonlyFunctionExamplePromiseAll")," (without ",(0,l.kt)("inlineCode",{parentName:"p"},"multicall"),")."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"await readonlyFunctionExample_multicallToMethods(\n    readonlyErc20WithMulticall\n    // No multicall here\n);\n")),(0,l.kt)("h2",{id:"write-functions"},"Write Functions"),(0,l.kt)("p",null,"An ",(0,l.kt)("inlineCode",{parentName:"p"},"ERC20")," has the following write functions:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sol"},"function approve(address _spender, uint256 _value) public returns (bool success);\nfunction transfer(address _to, uint256 _value) public returns (bool success);\n")),(0,l.kt)("p",null,"Similar to read-only functions, you can also use these functions by calling them in a contract. The following is an example on how to use ",(0,l.kt)("inlineCode",{parentName:"p"},"approve")," method."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"import { BN } from '@pendle/sdk-v2';\nconst erc20OfAlice = new ERC20Entity(USDCAddress, { signer: Alice.wallet });\n\nconst USDCDecimals = await erc20OfAlice.decimals();\nconst USDCDecimalsFactor = BN.from(10).pow(USDCDecimals);\n{\n    const approvalAmount = USDCDecimalsFactor.mul(10); // 10 USDC\n\n    console.log(\"Bob's allowance before: \", await erc20OfAlice.allowance(Alice.address, Bob.address));\n\n    const contractTransaction = await erc20OfAlice.approve(Bob.address, approvalAmount);\n    await contractTransaction.wait(/* confirmation= */ 1);\n\n    console.log(\"Bob's allowance after: \", await erc20OfAlice.allowance(Alice.address, Bob.address));\n}\n")),(0,l.kt)("p",null,"Output:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},'Bob\'s allowance before:  BigNumber { value: "0" }\nBob\'s allowance after:  BigNumber { value: "10000000" }\n')),(0,l.kt)("p",null,"And here is an example on how to send some USDC from Alice to Bob. Very similar from the above example."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},'{\n    const transferAmount = USDCDecimalsFactor.mul(10); // 10 USDC\n    console.log("Alice\'s balance before: ", await erc20OfAlice.balanceOf(Alice.address));\n    console.log("Bob\'s balance before: ", await erc20OfAlice.balanceOf(Bob.address));\n\n    const contractTransaction = await erc20OfAlice.transfer(Bob.address, transferAmount);\n    await contractTransaction.wait(/* confirmation= */ 1);\n\n    console.log("Alice\'s balance after: ", await erc20OfAlice.balanceOf(Alice.address));\n    console.log("Bob\'s balance after: ", await erc20OfAlice.balanceOf(Bob.address));\n}\n')),(0,l.kt)("p",null,"Output:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},'Alice\'s balance before:  BigNumber { value: "1000000000" }\nBob\'s balance before:  BigNumber { value: "1000000000" }\nAlice\'s balance after:  BigNumber { value: "990000000" }\nBob\'s balance after:  BigNumber { value: "1010000000" }\n\n')),(0,l.kt)("h2",{id:"meta-methods"},"Meta-methods"),(0,l.kt)("p",null,"Sometimes we don\u2019t want to make a change to the network, but we only want to see the hypothetical results, or we want to estimate the amount of gas used. Ethers.js allows doing these actions directly via ",(0,l.kt)("a",{parentName:"p",href:"https://docs.ethers.io/v5/api/contract/contract/#contract-callStatic"},(0,l.kt)("inlineCode",{parentName:"a"},"callStatic"))," and\n",(0,l.kt)("a",{parentName:"p",href:"https://docs.ethers.io/v5/api/contract/contract/#contract-estimateGas"},(0,l.kt)("inlineCode",{parentName:"a"},"estimateGas")),"\n",(0,l.kt)("em",{parentName:"p"},(0,l.kt)("a",{parentName:"em",href:"https://docs.ethers.io/v5/api/contract/contract/#Contract--metaclass"},"meta classes")),"."),(0,l.kt)("p",null,"The Pendle SDK also allows doing these actions via the ",(0,l.kt)("em",{parentName:"p"},"meta-method"),". Each write function also accepts an additional parameter, which is ",(0,l.kt)("inlineCode",{parentName:"p"},"MetaMethodType"),", defined as follows:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"type MetaMethodType = 'send' | 'callStatic' | 'estimateGas' | 'meta-method' | 'multicallStatic';\n")),(0,l.kt)("p",null,"This meta-method is the default behavior for a method call, which is to perform a transaction."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"{\n    const testAmount = USDCDecimalsFactor.mul(11);\n    console.log('Before');\n    console.log(\"Alice's balance:\", await erc20OfAlice.balanceOf(Alice.address));\n    console.log(\"Bob's balance:\", await erc20OfAlice.balanceOf(Bob.address));\n    console.log(\"Bob's allowance:\", await erc20OfAlice.balanceOf(Alice.address, Bob.address));\n    await erc20OfAlice.approve(Bob.address, testAmount, { method: 'send' }).then((transaction) => transaction.wait(1));\n    await erc20OfAlice.transfer(Bob.address, testAmount, { method: 'send' }).then((transaction) => transaction.wait(1));\n    console.log('After');\n    console.log(\"Alice's balance:\", await erc20OfAlice.balanceOf(Alice.address));\n    console.log(\"Bob's balance:\", await erc20OfAlice.balanceOf(Bob.address));\n    console.log(\"Bob's allowance:\", await erc20OfAlice.allowance(Alice.address, Bob.address));\n}\n")),(0,l.kt)("p",null,"Output:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},'Before\nAlice\'s balance: BigNumber { value: "990000000" }\nBob\'s balance: BigNumber { value: "1010000000" }\nBob\'s allowance: BigNumber { value: "990000000" }\nAfter\nAlice\'s balance: BigNumber { value: "979000000" }\nBob\'s balance: BigNumber { value: "1021000000" }\nBob\'s allowance: BigNumber { value: "11000000" }\n\n')),(0,l.kt)("h3",{id:"callstatic-meta-method"},(0,l.kt)("inlineCode",{parentName:"h3"},"callStatic")," meta-method"),(0,l.kt)("p",null,"Use this meta-method to ask a node to execute the contract and return the hypothetical results of the method."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"{\n    const testAmount = USDCDecimalsFactor.mul(12);\n    const isApproved = await erc20OfAlice.approve(Bob.address, testAmount, { method: 'callStatic' });\n    const transferable = await erc20OfAlice.transfer(Bob.address, testAmount, { method: 'callStatic' });\n    console.log({ isApproved, transferable });\n}\n")),(0,l.kt)("p",null,"Output:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"{ isApproved: true, transferable: true }\n")),(0,l.kt)("h3",{id:"multicallstatic-meta-method"},(0,l.kt)("inlineCode",{parentName:"h3"},"multicallStatic")," meta-method"),(0,l.kt)("p",null,"This is the same as ",(0,l.kt)("inlineCode",{parentName:"p"},"callStatic")," but with Multicall. Note that ",(0,l.kt)("inlineCode",{parentName:"p"},"multicall")," effects only happen for this meta-method if the entity is initialized with ",(0,l.kt)("inlineCode",{parentName:"p"},"Multicall"),", or passing it in the third parameter."),(0,l.kt)("admonition",{type:"info"},(0,l.kt)("p",{parentName:"admonition"},"Because we are using ",(0,l.kt)("strong",{parentName:"p"},"multicall"),", the ",(0,l.kt)("strong",{parentName:"p"},"sender")," will not the original sender, but it is the multicall contract itself!"),(0,l.kt)("p",{parentName:"admonition"},"Because of that, the below only ",(0,l.kt)("em",{parentName:"p"},"demonstrates")," the ",(0,l.kt)("inlineCode",{parentName:"p"},"approve")," function, and the owner here is ",(0,l.kt)("strong",{parentName:"p"},"the multicall contract"),". Even though this is not very useful in this context, ",(0,l.kt)("inlineCode",{parentName:"p"},"multicallStatic")," can still be used with other entities.")),(0,l.kt)("p",null,"With ",(0,l.kt)("inlineCode",{parentName:"p"},"multicall")," passed in the third parameter:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"{\n    const testAmount = USDCDecimalsFactor.mul(13);\n    console.log({ testAmount });\n    const [isApprovedForBob, isApprovedForAlice] = await Promise.all([\n        readonlyErc20.approve(Bob.address, testAmount, { method: 'multicallStatic', multicall }),\n        readonlyErc20.approve(Alice.address, testAmount, { method: 'multicallStatic', multicall }),\n    ]);\n    console.log({ isApprovedForBob, isApprovedForAlice });\n}\n")),(0,l.kt)("p",null,"Output:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},'{ testAmount: BigNumber { value: "13000000" } }\n{ isApprovedForBob: true, isApprovedForAlice: true }\n')),(0,l.kt)("p",null,"With ERC20 entity constructed with ",(0,l.kt)("inlineCode",{parentName:"p"},"multicall"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"{\n    const testAmount = USDCDecimalsFactor.mul(13);\n    console.log({ testAmount });\n    const [isApprovedForBob, isApprovedForAlice] = await Promise.all([\n        readonlyErc20WithMulticall.approve(Bob.address, testAmount, { method: 'multicallStatic' }),\n        readonlyErc20WithMulticall.approve(Alice.address, testAmount, { method: 'multicallStatic' }),\n    ]);\n    console.log({ isApprovedForBob, isApprovedForAlice });\n}\n")),(0,l.kt)("p",null,"Output:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},'{ testAmount: BigNumber { value: "13000000" } }\n{ isApprovedForBob: true, isApprovedForAlice: true }\n\n')),(0,l.kt)("h3",{id:"estimategas-meta-method"},(0,l.kt)("inlineCode",{parentName:"h3"},"estimateGas")," meta-method"),(0,l.kt)("p",null,"Use this meta method to estimate the amount of gas consumed for the method calls."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"{\n    const testAmount = USDCDecimalsFactor.mul(15);\n    const [approvalGasUsed, transferGasUsed] = await Promise.all([\n        erc20OfAlice.approve(Bob.address, testAmount, { method: 'estimateGas' }),\n        erc20OfAlice.transfer(Bob.address, testAmount, { method: 'estimateGas' }),\n    ]);\n    console.log({ approvalGasUsed, transferGasUsed });\n}\n")),(0,l.kt)("p",null,"Output:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},'{\n  approvalGasUsed: BigNumber { value: "43197" },\n  transferGasUsed: BigNumber { value: "48892" }\n}\n\n')),(0,l.kt)("h3",{id:"meta-method-meta-method"},(0,l.kt)("inlineCode",{parentName:"h3"},"meta-method")," meta-method"),(0,l.kt)("p",null,"This ",(0,l.kt)("strong",{parentName:"p"},"meta-method")," is the most powerful one. When this meta-method is used, the Pendle SDK will build and return an object, and we can do all previously mentioned methods with this built object."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"{\n    const testAmount = USDCDecimalsFactor.mul(16);\n    const approveMetaMethod = await erc20OfAlice.approve(Bob.address, testAmount, { method: 'meta-method' });\n    console.log('isApproved', await approveMetaMethod.callStatic());\n    console.log('Gas usage', await approveMetaMethod.estimateGas());\n\n    console.log(\"Bob's allowance before: \", await erc20OfAlice.allowance(Alice.address, Bob.address));\n    const contractTransaction = await approveMetaMethod.send();\n    await contractTransaction.wait(/* confirmations= */ 1);\n    console.log(\"Bob's allowance after: \", await erc20OfAlice.allowance(Alice.address, Bob.address));\n}\n")),(0,l.kt)("p",null,"Output:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},'isApproved true\nGas usage BigNumber { value: "43185" }\nBob\'s allowance before:  BigNumber { value: "11000000" }\nBob\'s allowance after:  BigNumber { value: "16000000" }\n\n')),(0,l.kt)("h2",{id:"other-functionalities"},"Other Functionalities"),(0,l.kt)("h3",{id:"passing-ethers-overrides-to-the-method-calls"},"Passing Ethers ",(0,l.kt)("inlineCode",{parentName:"h3"},"Overrides")," to the method calls"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"Overrides")," can be passed in the last parameter of the methods. "),(0,l.kt)("p",null,"Consider this ",(0,l.kt)("a",{parentName:"p",href:"https://etherscan.io/tx/0x14f77757bd1a80389cd1eb3a5fe49c7ce76e0e3462b434a9d33d9a4015e5f48d"},"transaction"),". It is at the block ",(0,l.kt)("inlineCode",{parentName:"p"},"16839151"),", with some USDC transfered from ",(0,l.kt)("inlineCode",{parentName:"p"},"0x81A31Af5d27915861Eced7865837599f3A070a2D")," to ",(0,l.kt)("inlineCode",{parentName:"p"},"0xe245212187AA7f423D09fC60F10CbBD623F97f9a"),". Let's see their balance before and after this block."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"import { toAddress } from '@pendle/sdk-v2';\n{\n    const block = 16839151;\n    const sender = toAddress('0x81A31Af5d27915861Eced7865837599f3A070a2D');\n    const receiver = toAddress('0xe245212187AA7f423D09fC60F10CbBD623F97f9a');\n\n    const [senderBalanceBefore, receiverBalanceBefore, senderBalanceAfter, receiverBalanceAfter] = await Promise.all([\n        readonlyErc20.balanceOf(sender, { multicall, overrides: { blockTag: block - 1 } }),\n        readonlyErc20.balanceOf(receiver, { multicall, overrides: { blockTag: block - 1 } }),\n        readonlyErc20.balanceOf(sender, { multicall, overrides: { blockTag: block } }),\n        readonlyErc20.balanceOf(receiver, { multicall, overrides: { blockTag: block } }),\n    ]);\n\n    console.log('Before: ', {\n        senderBalanceBefore,\n        receiverBalanceBefore,\n    });\n    console.log('After', {\n        senderBalanceAfter,\n        receiverBalanceAfter,\n    });\n}\n")),(0,l.kt)("p",null,"Output:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},'Before:  {\n  senderBalanceBefore: BigNumber { value: "400000000" },\n  receiverBalanceBefore: BigNumber { value: "500000000" }\n}\nAfter {\n  senderBalanceAfter: BigNumber { value: "0" },\n  receiverBalanceAfter: BigNumber { value: "900000000" }\n}\n\n')),(0,l.kt)("h3",{id:"the-inner-contract"},"The Inner Contract"),(0,l.kt)("p",null,"ERC20 entity has a property called ",(0,l.kt)("inlineCode",{parentName:"p"},"contract: WrappedContract<PendleERC20>"),". ",(0,l.kt)("inlineCode",{parentName:"p"},"PendleERC20")," is the contract interface generated to be compatible with ethers.js\u2019s ",(0,l.kt)("inlineCode",{parentName:"p"},"Contract")," object via ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/dethcrypto/TypeChain"},(0,l.kt)("inlineCode",{parentName:"a"},"typechain")),"."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"WrappedContract")," is our custom type that wraps around the generated interface to have additional functionalities, such as catching Pendle contract errors and calling contracts with multicall and meta-methods."),(0,l.kt)("p",null,"See ",(0,l.kt)("a",{parentName:"p",href:"/cn/Developers/SDK/WrappedContract"},(0,l.kt)("inlineCode",{parentName:"a"},"WrappedContract")),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"import { WrappedContract, PendleERC20 } from '@pendle/sdk-v2';\n\nconst wrappedContract: WrappedContract<PendleERC20> = readWriteErc20.contract;\n")),(0,l.kt)("h3",{id:"setting-the-abi"},"Setting the ABI"),(0,l.kt)("p",null,"If you wish to extend ",(0,l.kt)("inlineCode",{parentName:"p"},"ERC20")," classes with a different contract ABI, you can set the ABI via the constructor configuration parameters. The ABI should have a compatible type with the ",(0,l.kt)("inlineCode",{parentName:"p"},"ERC20")," ABI. Be careful to do otherwise, as Pendle SDK does not check to ABI compatibility."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"import { PendlePrincipalTokenABI, NetworkConnection } from '@pendle/sdk-v2';\n\nfunction createErc20ForPT(address: Address, networkConnection: NetworkConnection) {\n    return new ERC20Entity(address, { ...networkConnection, abi: PendlePrincipalTokenABI });\n}\n")),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"contract")," property, however, will still be ",(0,l.kt)("inlineCode",{parentName:"p"},"WrappedContract<PendleERC20>"),". If you know the correct type, you can cast it to that type."),(0,l.kt)("p",null,"If you wish to create a subclass of ",(0,l.kt)("inlineCode",{parentName:"p"},"ERC20"),", you can do as follows:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"import { PendlePrincipalToken } from '@pendle/sdk-v2';\n\nclass ERC20ForPT extends ERC20Entity {\n    // ...\n\n    get contract(): WrappedContract<PendlePrincipalToken> {\n        return this._contract as WrappedContract<PendlePrincipalToken>;\n    }\n}\n")),(0,l.kt)("p",null,"This is exactly what is done under the hood of Pendle SDK, as ",(0,l.kt)("inlineCode",{parentName:"p"},"PendlePrincipalToken")," does indeed extend ",(0,l.kt)("inlineCode",{parentName:"p"},"PendleERC20")," on the contract side."))}u.isMDXComponent=!0}}]);