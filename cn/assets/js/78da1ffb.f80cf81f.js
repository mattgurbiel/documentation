"use strict";(self.webpackChunkpendle_documentation=self.webpackChunkpendle_documentation||[]).push([[4919],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),c=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=c(e.components);return r.createElement(i.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=c(n),h=a,m=u["".concat(i,".").concat(h)]||u[h]||p[h]||o;return n?r.createElement(m,l(l({ref:t},d),{},{components:n})):r.createElement(m,l({ref:t},d))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=h;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s[u]="string"==typeof e?e:a,l[1]=s;for(var c=2;c<o;c++)l[c]=n[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},8211:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const o={hide_table_of_contents:!0},l="Trying the Pendle SDK",s={unversionedId:"Developers/SDK/Playground",id:"Developers/SDK/Playground",title:"Trying the Pendle SDK",description:"Overview",source:"@site/docs/Developers/SDK/Playground.md",sourceDirName:"Developers/SDK",slug:"/Developers/SDK/Playground",permalink:"/cn/Developers/SDK/Playground",draft:!1,tags:[],version:"current",frontMatter:{hide_table_of_contents:!0}},i={},c=[{value:"Overview",id:"overview",level:2},{value:"Dependencies Installation",id:"dependencies-installation",level:2},{value:"Configuration",id:"configuration",level:2},{value:"<code>.env</code> file",id:"env-file",level:3},{value:"<code>rpc-url.ts</code>",id:"rpc-urlts",level:3},{value:"<code>hardhat.config.ts</code>",id:"hardhatconfigts",level:3},{value:"Usage",id:"usage",level:2},{value:"Running",id:"running",level:2},{value:"Features",id:"features",level:2},{value:"Other things to note",id:"other-things-to-note",level:2},{value:"Bug Reporting",id:"bug-reporting",level:3},{value:"Block number and aggregator helper",id:"block-number-and-aggregator-helper",level:3},{value:"Readable <code>BigNumber</code> value when printing",id:"readable-bignumber-value-when-printing",level:3},{value:"Network Provider",id:"network-provider",level:2},{value:"Test Accounts",id:"test-accounts",level:2},{value:"Setting account balances for some tokens",id:"setting-account-balances-for-some-tokens",level:3}],d={toc:c},u="wrapper";function p(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"trying-the-pendle-sdk"},"Trying the Pendle SDK"),(0,a.kt)("h2",{id:"overview"},"Overview"),(0,a.kt)("p",null,"You can run a playground to play with the Pendle SDK by forking and cloning the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/pendle-finance/pendle-sdk-core-v2-public"},"pendle-sdk-core-v2-public")," repo."),(0,a.kt)("h2",{id:"dependencies-installation"},"Dependencies Installation"),(0,a.kt)("p",null,"After cloning to your local machine, to install the dependencies, do:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},"npm install\n")),(0,a.kt)("h2",{id:"configuration"},"Configuration"),(0,a.kt)("h3",{id:"env-file"},(0,a.kt)("inlineCode",{parentName:"h3"},".env")," file"),(0,a.kt)("p",null,"This file can be used to specify:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The chain ID"),(0,a.kt)("li",{parentName:"ul"},"Block number to fork from (for deterministic result)")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},".env")," values are also type checked. Check ",(0,a.kt)("inlineCode",{parentName:"p"},"./load-env.ts")," to see the schema."),(0,a.kt)("h3",{id:"rpc-urlts"},(0,a.kt)("inlineCode",{parentName:"h3"},"rpc-url.ts")),(0,a.kt)("p",null,"The RPC URL of the the supported chains by Pendle SDK can be specified here. By default, this file contains the public RPCs."),(0,a.kt)("h3",{id:"hardhatconfigts"},(0,a.kt)("inlineCode",{parentName:"h3"},"hardhat.config.ts")),(0,a.kt)("p",null,"The configuration for ",(0,a.kt)("inlineCode",{parentName:"p"},"hardhat"),". Please refer to ",(0,a.kt)("a",{parentName:"p",href:"https://hardhat.org/hardhat-runner/docs/config"},"https://hardhat.org/hardhat-runner/docs/config"),"."),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)("p",null,"Code should be written in ",(0,a.kt)("inlineCode",{parentName:"p"},"src/index.ts")," only to test things out."),(0,a.kt)("h2",{id:"running"},"Running"),(0,a.kt)("p",null,"Please start ",(0,a.kt)("strong",{parentName:"p"},"2 terminals"),"."),(0,a.kt)("p",null,"The first one will run a local fork of a network with the chain ID specified in ",(0,a.kt)("inlineCode",{parentName:"p"},".env"),".:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},"npm run local-fork\n")),(0,a.kt)("p",null,"The second console can be used to run the script with the following command:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},"npm start\n")),(0,a.kt)("p",null,"The script will save a snapshot of the fork and it will automatically restore after the script is done."),(0,a.kt)("h2",{id:"features"},"Features"),(0,a.kt)("p",null,"Please refer to ",(0,a.kt)("inlineCode",{parentName:"p"},"booststrap.ts")," for full list of useful functions. In this file, you are able to find:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"impersonateAccount")," for account impersonation;"),(0,a.kt)("li",{parentName:"ul"},"Human-readable ethers.js ",(0,a.kt)("inlineCode",{parentName:"li"},"BigNumber")," when printing to console;"),(0,a.kt)("li",{parentName:"ul"},"Automatically revert after running;"),(0,a.kt)("li",{parentName:"ul"},"Test accounts with filled balances;")),(0,a.kt)("h2",{id:"other-things-to-note"},"Other things to note"),(0,a.kt)("h3",{id:"bug-reporting"},"Bug Reporting"),(0,a.kt)("p",null,"For bug reports, Please indicate the exact SDK version for easier debugging."),(0,a.kt)("h3",{id:"block-number-and-aggregator-helper"},"Block number and aggregator helper"),(0,a.kt)("p",null,"When using Pendle SDK router, please do not fix the block number. This is because the aggregator works independently from the local forked network."),(0,a.kt)("p",null,"It is recommended to use ",(0,a.kt)("inlineCode",{parentName:"p"},"Router.getRouter")," if an aggregator (KyberSwap) is not required in the event that you need to affix a specific block number such that operations everything can be deterministic."),(0,a.kt)("h3",{id:"readable-bignumber-value-when-printing"},"Readable ",(0,a.kt)("inlineCode",{parentName:"h3"},"BigNumber")," value when printing"),(0,a.kt)("p",null,"Pendle SDK is built on top of ",(0,a.kt)("inlineCode",{parentName:"p"},"Ethers.js")," v5 library, and it uses ",(0,a.kt)("inlineCode",{parentName:"p"},"BigNumber")," to do calculation with high precision integers. But its output is not readable for us."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { BN } from '@pendle/sdk-v2';\nconsole.log(BN.from(123));\n")),(0,a.kt)("p",null,"Output:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"BigNumber { _hex: '0x7b', _isBigNumber: true }\n")),(0,a.kt)("p",null,"With the following fix from ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/NomicFoundation/hardhat/blob/main/packages/hardhat-ethers/src/internal/index.ts#L19-L25"},"hardhat-ethers"),", we can have a nice presentation of ",(0,a.kt)("inlineCode",{parentName:"p"},"BigNumber")," logging into the console."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const registerCustomInspection = (BigNumber: any) => {\n    const inspectCustomSymbol = Symbol.for('nodejs.util.inspect.custom');\n    BigNumber.prototype[inspectCustomSymbol] = function () {\n        return `BigNumber { value: \"${this.toString()}\" }`;\n    };\n};\nregisterCustomInspection(BN);\n\nconsole.log(BN.from(123));\n")),(0,a.kt)("p",null,"Output:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'BigNumber { value: "123" }\n')),(0,a.kt)("h2",{id:"network-provider"},"Network Provider"),(0,a.kt)("p",null,"We use ",(0,a.kt)("inlineCode",{parentName:"p"},"hardhat")," to run a local fork. This can be done with the following command from the root directory of the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/pendle-finance/pendle-sdk-core-v2-docs"},"Pendle SDK docs"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"yarn local-fork\n")),(0,a.kt)("p",null,"The JSON-RPC url will be ",(0,a.kt)("inlineCode",{parentName:"p"},"http://localhost:8545"),", which is also the default URL of ",(0,a.kt)("a",{parentName:"p",href:"https://docs.ethers.org/v5/api/providers/jsonrpc-provider/#StaticJsonRpcProvider"},"StaticJsonRpcProvider"),"."),(0,a.kt)("p",null,"See ",(0,a.kt)("a",{parentName:"p",href:"https://hardhat.org/hardhat-network/docs/guides/forking-other-networks"},"hardhat documentation on forking networks"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { providers } from 'ethers';\nexport const provider = new providers.StaticJsonRpcProvider();\n")),(0,a.kt)("h2",{id:"test-accounts"},"Test Accounts"),(0,a.kt)("p",null,"Default mnemonics used by Hardhat to generate accounts with 1000 ETH."),(0,a.kt)("p",null,"See ",(0,a.kt)("a",{parentName:"p",href:"https://hardhat.org/hardhat-network/docs/reference"},"hardhat reference"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { utils, Wallet } from 'ethers';\nimport { Address, toAddress } from '@pendle/sdk-v2';\n\nconst testMnemonic = 'test test test test test test test test test test test junk';\nexport const masterHDNode = utils.HDNode.fromMnemonic(testMnemonic);\n\nfunction createTestAccount(id: number) {\n    const path = `m/44'/60'/0'/0/${id}`;\n    const derrivedNode = masterHDNode.derivePath(path);\n    const address = toAddress(derrivedNode.address);\n    const wallet = new Wallet(derrivedNode.privateKey, provider);\n    return {\n        address,\n        wallet,\n    };\n}\n\nexport const testAccounts = Array.from({ length: 10 }, (_, id) => createTestAccount(id));\nconsole.log(testAccounts.map(({ address }) => address));\n")),(0,a.kt)("p",null,"Output:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"[\n  '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n  '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n  '0x3c44cdddb6a900fa2b585dd299e03d12fa4293bc',\n  '0x90f79bf6eb2c4f870365e785982e1f101e93b906',\n  '0x15d34aaf54267db7d7c367839aaf71a00a2c6a65',\n  '0x9965507d1a55bcc2695c58ba16fb37d819b0a4dc',\n  '0x976ea74026e726554db657fa54763abd0c3a0aa9',\n  '0x14dc79964da2c08b23698b3d3cc7ca32193d9955',\n  '0x23618e81e3f5cdf7f54c3d65f7fbc0abf5b21e8f',\n  '0xa0ee7a142d267c1f36714e4a8f75612f20a79720'\n]\n")),(0,a.kt)("p",null,"We can test their balance as follows:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { createERC20, NATIVE_ADDRESS_0xEE } from '@pendle/sdk-v2';\nconst nativeTokenERC20 = createERC20(NATIVE_ADDRESS_0xEE, { provider, chainId });\nconsole.log(await nativeTokenERC20.balanceOf(testAccounts[0].address));\n")),(0,a.kt)("p",null,"Output:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'BigNumber { value: "9974800137514959330153" }\n')),(0,a.kt)("h3",{id:"setting-account-balances-for-some-tokens"},"Setting account balances for some tokens"),(0,a.kt)("p",null,"To do this, we need to do some ",(0,a.kt)("em",{parentName:"p"},"hacking"),". As we are using a local fork, we can directly set the user balance in the contract's memory by setting the storage value with the following function."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { ethers } from 'ethers';\n\nasync function setRawERC20Balance(address: Address, user: Address, rawAmount: BN, slot: number, reverse = false) {\n    const order = reverse ? [slot, user] : [user, slot];\n    const index = ethers.utils.solidityKeccak256(['uint256', 'uint256'], order);\n    await provider.send('hardhat_setStorageAt', [address, index, ethers.utils.hexZeroPad(rawAmount.toHexString(), 32)]);\n}\n\nasync function setERC20BalanceForAllAccounts(tokenAddress: Address, amount: BN, slot: number, reverse = false) {\n    const tokenDecimals = await createERC20(tokenAddress, { provider, chainId }).decimals();\n    const rawAmount = BN.from(10).pow(tokenDecimals).mul(amount);\n    await Promise.all(\n        testAccounts.map(({ address: userAddress }) =>\n            setRawERC20Balance(tokenAddress, userAddress, rawAmount, slot, reverse)\n        )\n    );\n}\n")),(0,a.kt)("p",null,"Here is how we set the balance for USDC."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const USDCAddress = toAddress('0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48');\nconst USDCSlot = 9;\nconst usdcERC20 = createERC20(USDCAddress, { provider, chainId });\nconsole.log('Balance before: ', await usdcERC20.balanceOf(testAccounts[0].address));\nawait setERC20BalanceForAllAccounts(USDCAddress, BN.from(1000), USDCSlot, false);\nconsole.log('Balance after:', await usdcERC20.balanceOf(testAccounts[0].address));\n")),(0,a.kt)("p",null,"Output:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'Balance before:  BigNumber { value: "1100711387" }\nBalance after: BigNumber { value: "1000000000" }\n')),(0,a.kt)("p",null,"Here the slot number is found beforehand, we just hardcode it. We can also set the balance for some other interesting tokens."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const slotData: Record<string, [tokenAddress: Address, slot: number, reverse: boolean]> = {\n    USDT: [toAddress('0xdac17f958d2ee523a2206206994597c13d831ec7'), 2, false],\n    DAI: [toAddress('0x6b175474e89094c44da98b954eedeac495271d0f'), 2, false],\n    // WETH: [toAddress('0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'), 3, false],\n    FRAX: [toAddress('0x853d955acef822db058eb8505911ed77f175b99e'), 0, false],\n    USDC: [toAddress('0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48'), 9, false],\n};\n\nfor (const [tokenAddress, slot, reverse] of Object.values(slotData)) {\n    setERC20BalanceForAllAccounts(tokenAddress, BN.from(1000), slot, reverse);\n}\n")))}p.isMDXComponent=!0}}]);