"use strict";(self.webpackChunkpendle_documentation=self.webpackChunkpendle_documentation||[]).push([[9648],{3905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>b});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var d=a.createContext({}),u=function(e){var n=a.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},s=function(e){var n=u(e.components);return a.createElement(d.Provider,{value:n},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,l=e.originalType,d=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),c=u(t),m=r,b=c["".concat(d,".").concat(m)]||c[m]||p[m]||l;return t?a.createElement(b,i(i({ref:n},s),{},{components:t})):a.createElement(b,i({ref:n},s))}));function b(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=t.length,i=new Array(l);i[0]=m;var o={};for(var d in n)hasOwnProperty.call(n,d)&&(o[d]=n[d]);o.originalType=e,o[c]="string"==typeof e?e:r,i[1]=o;for(var u=2;u<l;u++)i[u]=t[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},4979:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>p,frontMatter:()=>l,metadata:()=>o,toc:()=>u});var a=t(7462),r=(t(7294),t(3905));const l={hide_table_of_contents:!0},i="Market Entity",o={unversionedId:"Developers/SDK/MarketEntity",id:"Developers/SDK/MarketEntity",title:"Market Entity",description:"Overview",source:"@site/docs/Developers/SDK/MarketEntity.md",sourceDirName:"Developers/SDK",slug:"/Developers/SDK/MarketEntity",permalink:"/cn/Developers/SDK/MarketEntity",draft:!1,tags:[],version:"current",frontMatter:{hide_table_of_contents:!0}},d={},u=[{value:"Overview",id:"overview",level:2},{value:"<code>MarketEntity</code> Object Creation",id:"marketentity-object-creation",level:2},{value:"Querying <code>MarketEntity</code> Information",id:"querying-marketentity-information",level:2},{value:"Getting corresponding tokens of a <code>MarketEntity</code>",id:"getting-corresponding-tokens-of-a-marketentity",level:3},{value:"Getting the tokens as a <code>PendleEntity</code>",id:"getting-the-tokens-as-a-pendleentity",level:3},{value:"Getting the reward tokens",id:"getting-the-reward-tokens",level:3},{value:"Getting market information",id:"getting-market-information",level:3},{value:"Getting user information",id:"getting-user-information",level:3},{value:"Getting user&#39;s balance and user&#39;s active balance.",id:"getting-users-balance-and-users-active-balance",level:2},{value:"Getting user&#39;s balances and unclaimed rewards",id:"getting-users-balances-and-unclaimed-rewards",level:3},{value:"Simulating rewards redemption",id:"simulating-rewards-redemption",level:3},{value:"Redeeming rewards for a user",id:"redeeming-rewards-for-a-user",level:3}],s={toc:u},c="wrapper";function p(e){let{components:n,...t}=e;return(0,r.kt)(c,(0,a.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"market-entity"},"Market Entity"),(0,r.kt)("h2",{id:"overview"},"Overview"),(0,r.kt)("p",null,"The Pendle SDK ",(0,r.kt)("inlineCode",{parentName:"p"},"MarketEntity")," is a simple entity that wrap around ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/pendle-finance/pendle-core-v2-public/blob/main/contracts/core/Market/PendleMarket.sol"},"PendleMarket contract"),". This entity allows the user to get the basic information about a ",(0,r.kt)("inlineCode",{parentName:"p"},"PendleMarket"),"."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"MarketEntity")," is also a Pendle SDK ",(0,r.kt)("inlineCode",{parentName:"p"},"ERC20Entity"),", because in reality, the ",(0,r.kt)("inlineCode",{parentName:"p"},"PendleMarket")," contract is technically also an ",(0,r.kt)("inlineCode",{parentName:"p"},"ERC20")," contract. Please checkout the ",(0,r.kt)("a",{parentName:"p",href:"/cn/Developers/SDK/ERC20Interaction"},"ERC20 Interaction tutorial with the Pendle SDK")," for in-depth explanation of ",(0,r.kt)("inlineCode",{parentName:"p"},"ERC20Entity")," in particular and of ",(0,r.kt)("inlineCode",{parentName:"p"},"PendleEntity")," in general."),(0,r.kt)("h2",{id:"marketentity-object-creation"},(0,r.kt)("inlineCode",{parentName:"h2"},"MarketEntity")," Object Creation"),(0,r.kt)("p",null,"Similar to ",(0,r.kt)("inlineCode",{parentName:"p"},"ERC20Entity"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"MarketEntity")," requires:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The contract address."),(0,r.kt)("li",{parentName:"ul"},"Network Provider and/or a Signer")),(0,r.kt)("p",null,"Additionally, ",(0,r.kt)("inlineCode",{parentName:"p"},"MarketEntity")," requires the ",(0,r.kt)("inlineCode",{parentName:"p"},"chainId")," to get the off-chain helper\nfor the corresponding chain."),(0,r.kt)("p",null,"Let's take a look at the ",(0,r.kt)("a",{parentName:"p",href:"https://app.pendle.finance/pro/markets/0x7b246b8dbc2a640bf2d8221890cee8327fc23917/swap?view=yt"},"FRAX-USDC market")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import {\n    toAddress,\n    MarketEntity,\n    ERC20Entity,\n    Multicall,\n} from '@pendle/sdk-v2';\nimport { provider } from './sdk-doc-playground.mjs';\nconst FRAX_USDCContractAddress = toAddress(\n    '0x7b246b8dbc2a640bf2d8221890cee8327fc23917'\n);\n\nconst FRAX_USDCMarket = new MarketEntity(FRAX_USDCContractAddress, {\n    chainId: 1,\n    provider,\n\n    // This is optional. Including `Multicall` here will enable multicall for\n    // subsequenct read-only calls.\n    multicall: new Multicall({ chainId: 1, provider }),\n});\n\nasync function getERC20MetaData(erc20: ERC20Entity) {\n    const [name, symbol, totalSupply, decimals] = await Promise.all([\n        erc20.name(),\n        erc20.symbol(),\n        erc20.totalSupply(),\n        erc20.decimals(),\n    ]);\n    return { name, symbol, totalSupply, decimals };\n}\n\nconsole.log(await getERC20MetaData(FRAX_USDCMarket));\n")),(0,r.kt)("p",null,"Output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"{\n  name: 'Pendle Market',\n  symbol: 'PENDLE-LPT',\n  totalSupply: BigNumber { value: \"865584995351942836127\" },\n  decimals: 18\n}\n")),(0,r.kt)("h2",{id:"querying-marketentity-information"},"Querying ",(0,r.kt)("inlineCode",{parentName:"h2"},"MarketEntity")," Information"),(0,r.kt)("h3",{id:"getting-corresponding-tokens-of-a-marketentity"},"Getting corresponding tokens of a ",(0,r.kt)("inlineCode",{parentName:"h3"},"MarketEntity")),(0,r.kt)("p",null,"We can get the Market's ",(0,r.kt)("inlineCode",{parentName:"p"},"PT"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"YT")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Sy")," tokens' addresses using the the\nmethod with the same name."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"{\n    const [ptAddress, ytAddress, syAddress] = await Promise.all([\n        FRAX_USDCMarket.PT(),\n        FRAX_USDCMarket.YT(),\n        FRAX_USDCMarket.SY(),\n    ]);\n    console.log({ ptAddress, ytAddress, syAddress });\n}\n")),(0,r.kt)("p",null,"Output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"{\n  ptAddress: '0x5fe30ac5cb1abb0e44cdffb2916c254aeb368650',\n  ytAddress: '0xc5cd692e9b4622ab8cdb57c83a0f99f874a169cd',\n  syAddress: '0xd393d1ddd6b8811a86d925f5e14014282581bc04'\n}\n")),(0,r.kt)("p",null,"The function name are all CAP to reflect the same functions of the contract. ",(0,r.kt)("inlineCode",{parentName:"p"},"MarketEntity")," also includes the lowercase function as alias."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"{\n    const [ptAddress, ytAddress, syAddress] = await Promise.all([\n        FRAX_USDCMarket.pt(),\n        FRAX_USDCMarket.yt(),\n        FRAX_USDCMarket.sy(),\n    ]);\n    console.log({ ptAddress, ytAddress, syAddress });\n}\n")),(0,r.kt)("p",null,"Output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"{\n  ptAddress: '0x5fe30ac5cb1abb0e44cdffb2916c254aeb368650',\n  ytAddress: '0xc5cd692e9b4622ab8cdb57c83a0f99f874a169cd',\n  syAddress: '0xd393d1ddd6b8811a86d925f5e14014282581bc04'\n}\n")),(0,r.kt)("h3",{id:"getting-the-tokens-as-a-pendleentity"},"Getting the tokens as a ",(0,r.kt)("inlineCode",{parentName:"h3"},"PendleEntity")),(0,r.kt)("p",null,"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"ptEntity"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"ytEntity")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"syEntity")," to get the coressponding ",(0,r.kt)("inlineCode",{parentName:"p"},"PendleEntity")," of ",(0,r.kt)("inlineCode",{parentName:"p"},"PT"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"YT")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"SY")," with the same configuration as the `MarketEntity."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"{\n    const [ptEntity, ytEntity, syEntity] = await Promise.all([\n        FRAX_USDCMarket.ptEntity(),\n        FRAX_USDCMarket.ytEntity(),\n        FRAX_USDCMarket.syEntity(),\n    ]);\n\n    console.log({\n        ptInfo: await getERC20MetaData(ptEntity),\n        ytInfo: await getERC20MetaData(ytEntity),\n        syInfo: await getERC20MetaData(syEntity),\n    });\n}\n")),(0,r.kt)("p",null,"Output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"{\n  ptInfo: {\n    name: 'PT FRAXUSDC_CurveLP Convex 30MAR2023',\n    symbol: 'PT-FRAXUSDC_CurveLP Convex-30MAR2023',\n    totalSupply: BigNumber { value: \"900103365617348713482\" },\n    decimals: 18\n  },\n  ytInfo: {\n    name: 'YT FRAXUSDC_CurveLP Convex 30MAR2023',\n    symbol: 'YT-FRAXUSDC_CurveLP Convex-30MAR2023',\n    totalSupply: BigNumber { value: \"695041199422804112579898\" },\n    decimals: 18\n  },\n  syInfo: {\n    name: 'SY FRAXUSDC_CurveLP Convex',\n    symbol: 'SY-FRAXUSDC_CurveLP Convex',\n    totalSupply: BigNumber { value: \"2571505102143705367580\" },\n    decimals: 18\n  }\n}\n")),(0,r.kt)("h3",{id:"getting-the-reward-tokens"},"Getting the reward tokens"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"console.log(await FRAX_USDCMarket.getRewardTokens());\n")),(0,r.kt)("p",null,"Output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"[\n  '0xd533a949740bb3306d119cc777fa900ba034cd52',\n  '0x4e3fbd56cd56c3e72c1403e103b45db9da5b9d2b',\n  '0x808507121b80c02388fad14726482e061b8da827'\n]\n")),(0,r.kt)("h3",{id:"getting-market-information"},"Getting market information"),(0,r.kt)("p",null,"To get the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/pendle-finance/pendle-core-v2-public/blob/38347af3b08ffc6cbf6ab5c70f4aee0b29ef4be6/contracts/core/Market/MarketMathCore.sol#L11"},"PendleMarket contract state"),", we can use ",(0,r.kt)("inlineCode",{parentName:"p"},"MarketEntity#readState")," function."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"console.log(await FRAX_USDCMarket.readState());\n")),(0,r.kt)("p",null,"Output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'{\n  \'0\': BigNumber { value: "827166031270122365344" },\n  \'1\': BigNumber { value: "916277796433343523026" },\n  \'2\': BigNumber { value: "865584995351942836127" },\n  \'3\': \'0x8270400d528c34e1596EF367eeDEc99080A1b592\',\n  \'4\': BigNumber { value: "27800000000000000000" },\n  \'5\': BigNumber { value: "1680134400" },\n  \'6\': BigNumber { value: "999500333083533" },\n  \'7\': BigNumber { value: "80" },\n  \'8\': BigNumber { value: "27025149854298173" },\n  totalPt: BigNumber { value: "827166031270122365344" },\n  totalSy: BigNumber { value: "916277796433343523026" },\n  totalLp: BigNumber { value: "865584995351942836127" },\n  treasury: \'0x8270400d528c34e1596ef367eedec99080a1b592\',\n  scalarRoot: BigNumber { value: "27800000000000000000" },\n  expiry: BigNumber { value: "1680134400" },\n  lnFeeRateRoot: BigNumber { value: "999500333083533" },\n  reserveFeePercent: BigNumber { value: "80" },\n  lastLnImpliedRate: BigNumber { value: "27025149854298173" }\n}\n')),(0,r.kt)("p",null,"We also provides a higher-level function called ",(0,r.kt)("inlineCode",{parentName:"p"},"MarketEntity#getMarketInfo"),". This functions also returns the market state, as well as two other fields: ",(0,r.kt)("inlineCode",{parentName:"p"},"marketExchangeRateExcludeFee")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"impliedYield"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"console.log(await FRAX_USDCMarket.getMarketInfo());\n")),(0,r.kt)("p",null,"Output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'{\n  \'0\': \'0x5fe30Ac5cb1aBB0e44CdffB2916c254AEb368650\',\n  \'1\': \'0xC5Cd692e9b4622ab8Cdb57C83A0f99f874A169Cd\',\n  \'2\': \'0xD393D1dDd6B8811A86D925F5E14014282581bC04\',\n  \'3\': BigNumber { value: "1027393641238955112" },\n  \'4\': BigNumber { value: "1000000000000000000" },\n  \'5\': [\n    BigNumber { value: "827166031270122365344" },\n    BigNumber { value: "916277796433343523026" },\n    BigNumber { value: "865584995351942836127" },\n    \'0x8270400d528c34e1596EF367eeDEc99080A1b592\',\n    BigNumber { value: "27800000000000000000" },\n    BigNumber { value: "1680134400" },\n    BigNumber { value: "999500333083533" },\n    BigNumber { value: "80" },\n    BigNumber { value: "27025149854298173" },\n    totalPt: BigNumber { value: "827166031270122365344" },\n    totalSy: BigNumber { value: "916277796433343523026" },\n    totalLp: BigNumber { value: "865584995351942836127" },\n    treasury: \'0x8270400d528c34e1596EF367eeDEc99080A1b592\',\n    scalarRoot: BigNumber { value: "27800000000000000000" },\n    expiry: BigNumber { value: "1680134400" },\n    lnFeeRateRoot: BigNumber { value: "999500333083533" },\n    reserveFeePercent: BigNumber { value: "80" },\n    lastLnImpliedRate: BigNumber { value: "27025149854298173" }\n  ],\n  pt: \'0x5fe30ac5cb1abb0e44cdffb2916c254aeb368650\',\n  yt: \'0xc5cd692e9b4622ab8cdb57c83a0f99f874a169cd\',\n  sy: \'0xd393d1ddd6b8811a86d925f5e14014282581bc04\',\n  impliedYield: BigNumber { value: "1027393641238955112" },\n  marketExchangeRateExcludeFee: BigNumber { value: "1000000000000000000" },\n  state: {\n    \'0\': BigNumber { value: "827166031270122365344" },\n    \'1\': BigNumber { value: "916277796433343523026" },\n    \'2\': BigNumber { value: "865584995351942836127" },\n    \'3\': \'0x8270400d528c34e1596EF367eeDEc99080A1b592\',\n    \'4\': BigNumber { value: "27800000000000000000" },\n    \'5\': BigNumber { value: "1680134400" },\n    \'6\': BigNumber { value: "999500333083533" },\n    \'7\': BigNumber { value: "80" },\n    \'8\': BigNumber { value: "27025149854298173" },\n    totalPt: BigNumber { value: "827166031270122365344" },\n    totalSy: BigNumber { value: "916277796433343523026" },\n    totalLp: BigNumber { value: "865584995351942836127" },\n    treasury: \'0x8270400d528c34e1596ef367eedec99080a1b592\',\n    scalarRoot: BigNumber { value: "27800000000000000000" },\n    expiry: BigNumber { value: "1680134400" },\n    lnFeeRateRoot: BigNumber { value: "999500333083533" },\n    reserveFeePercent: BigNumber { value: "80" },\n    lastLnImpliedRate: BigNumber { value: "27025149854298173" }\n  }\n}\n')),(0,r.kt)("h3",{id:"getting-user-information"},"Getting user information"),(0,r.kt)("p",null,"To demonstrate the usage of these functions, we should have a user address that already had balance in this market. Let's consider the user ",(0,r.kt)("inlineCode",{parentName:"p"},"0xbD525dfF925DF9c063C77B29d5Eec8f977B79476"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const userAddress = toAddress('0xbD525dfF925DF9c063C77B29d5Eec8f977B79476');\n")),(0,r.kt)("h2",{id:"getting-users-balance-and-users-active-balance"},"Getting user's balance and user's active balance."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"console.log({\n    userBalance: await FRAX_USDCMarket.balanceOf(userAddress),\n    userActiveBalance: await FRAX_USDCMarket.activeBalance(userAddress),\n});\n")),(0,r.kt)("p",null,"Output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'{\n  userBalance: BigNumber { value: "2381607113073137129" },\n  userActiveBalance: BigNumber { value: "952645870769841273" }\n}\n')),(0,r.kt)("h3",{id:"getting-users-balances-and-unclaimed-rewards"},"Getting user's balances and unclaimed rewards"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"console.log(await FRAX_USDCMarket.getUserMarketInfo(userAddress));\n")),(0,r.kt)("p",null,"Output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"{\n  lpBalance: {\n    token: '0x7b246b8dbc2a640bf2d8221890cee8327fc23917',\n    amount: BigNumber { value: \"2381607113073137129\" }\n  },\n  ptBalance: {\n    token: '0x5fe30ac5cb1abb0e44cdffb2916c254aeb368650',\n    amount: BigNumber { value: \"2275899552723200631\" }\n  },\n  syBalance: {\n    token: '0xd393d1ddd6b8811a86d925f5e14014282581bc04',\n    amount: BigNumber { value: \"2521085426913336150\" }\n  },\n  unclaimedRewards: [\n    {\n      token: '0xd533a949740bb3306d119cc777fa900ba034cd52',\n      amount: BigNumber { value: \"1110427423923\" }\n    },\n    {\n      token: '0x4e3fbd56cd56c3e72c1403e103b45db9da5b9d2b',\n      amount: BigNumber { value: \"17766838782\" }\n    },\n    {\n      token: '0x808507121b80c02388fad14726482e061b8da827',\n      amount: BigNumber { value: \"0\" }\n    }\n  ]\n}\n")),(0,r.kt)("h3",{id:"simulating-rewards-redemption"},"Simulating rewards redemption"),(0,r.kt)("p",null,"To simulate the rewards redeeming process, use ",(0,r.kt)("inlineCode",{parentName:"p"},"MarketEntity#simulateRewards")," function."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"console.log(await FRAX_USDCMarket.getRewardTokens());\nconsole.log(await FRAX_USDCMarket.simulateRedeemRewards(userAddress));\n")),(0,r.kt)("p",null,"Output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"[\n  '0xd533a949740bb3306d119cc777fa900ba034cd52',\n  '0x4e3fbd56cd56c3e72c1403e103b45db9da5b9d2b',\n  '0x808507121b80c02388fad14726482e061b8da827'\n]\n[\n  BigNumber { value: \"1110427423923\" },\n  BigNumber { value: \"17766838782\" },\n  BigNumber { value: \"0\" }\n]\n")),(0,r.kt)("p",null,"To pair the rewards with the corresponding tokens, use ",(0,r.kt)("inlineCode",{parentName:"p"},"MarketEntity#simulateRedeemRewardsWithTokens")," function."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"console.log(await FRAX_USDCMarket.simulateRedeemRewardsWithTokens(userAddress));\n")),(0,r.kt)("p",null,"Output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"[\n  {\n    token: '0xd533a949740bb3306d119cc777fa900ba034cd52',\n    amount: BigNumber { value: \"1110427423923\" }\n  },\n  {\n    token: '0x4e3fbd56cd56c3e72c1403e103b45db9da5b9d2b',\n    amount: BigNumber { value: \"17766838782\" }\n  },\n  {\n    token: '0x808507121b80c02388fad14726482e061b8da827',\n    amount: BigNumber { value: \"0\" }\n  }\n]\n")),(0,r.kt)("h3",{id:"redeeming-rewards-for-a-user"},"Redeeming rewards for a user"),(0,r.kt)("p",null,"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"MarketEntity#redeemRewards")," to perform the reward redeeming transaction\nfor a given user. As this is a write contract, a signer is require."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { testAccounts } from './sdk-doc-playground.mjs';\n\n{\n    const writeContract = new MarketEntity(FRAX_USDCContractAddress, {\n        chainId: 1,\n        signer: testAccounts[0].wallet,\n    });\n\n    console.log('Before:');\n    console.log(await writeContract.getUserMarketInfo(userAddress));\n\n    const transaction = await writeContract.redeemRewards(userAddress);\n    await transaction.wait(/* confirmation= */ 1);\n\n    console.log('After:');\n    console.log(await writeContract.getUserMarketInfo(userAddress));\n}\n")),(0,r.kt)("p",null,"Output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"Before:\n{\n  lpBalance: {\n    token: '0x7b246b8dbc2a640bf2d8221890cee8327fc23917',\n    amount: BigNumber { value: \"2381607113073137129\" }\n  },\n  ptBalance: {\n    token: '0x5fe30ac5cb1abb0e44cdffb2916c254aeb368650',\n    amount: BigNumber { value: \"2275899552723200631\" }\n  },\n  syBalance: {\n    token: '0xd393d1ddd6b8811a86d925f5e14014282581bc04',\n    amount: BigNumber { value: \"2521085426913336150\" }\n  },\n  unclaimedRewards: [\n    {\n      token: '0xd533a949740bb3306d119cc777fa900ba034cd52',\n      amount: BigNumber { value: \"1110427423923\" }\n    },\n    {\n      token: '0x4e3fbd56cd56c3e72c1403e103b45db9da5b9d2b',\n      amount: BigNumber { value: \"17766838782\" }\n    },\n    {\n      token: '0x808507121b80c02388fad14726482e061b8da827',\n      amount: BigNumber { value: \"0\" }\n    }\n  ]\n}\nAfter:\n{\n  lpBalance: {\n    token: '0x7b246b8dbc2a640bf2d8221890cee8327fc23917',\n    amount: BigNumber { value: \"2381607113073137129\" }\n  },\n  ptBalance: {\n    token: '0x5fe30ac5cb1abb0e44cdffb2916c254aeb368650',\n    amount: BigNumber { value: \"2275899552723200631\" }\n  },\n  syBalance: {\n    token: '0xd393d1ddd6b8811a86d925f5e14014282581bc04',\n    amount: BigNumber { value: \"2521085426913336150\" }\n  },\n  unclaimedRewards: [\n    {\n      token: '0xd533a949740bb3306d119cc777fa900ba034cd52',\n      amount: BigNumber { value: \"0\" }\n    },\n    {\n      token: '0x4e3fbd56cd56c3e72c1403e103b45db9da5b9d2b',\n      amount: BigNumber { value: \"0\" }\n    },\n    {\n      token: '0x808507121b80c02388fad14726482e061b8da827',\n      amount: BigNumber { value: \"0\" }\n    }\n  ]\n}\n")))}p.isMDXComponent=!0}}]);