"use strict";(self.webpackChunkpendle_documentation=self.webpackChunkpendle_documentation||[]).push([[7116],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var a=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var o=a.createContext({}),s=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=s(e.components);return a.createElement(o.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,r=e.originalType,o=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),p=s(n),m=l,h=p["".concat(o,".").concat(m)]||p[m]||d[m]||r;return n?a.createElement(h,i(i({ref:t},u),{},{components:n})):a.createElement(h,i({ref:t},u))}));function h(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=n.length,i=new Array(r);i[0]=m;var c={};for(var o in t)hasOwnProperty.call(t,o)&&(c[o]=t[o]);c.originalType=e,c[p]="string"==typeof e?e:l,i[1]=c;for(var s=2;s<r;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4861:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>d,frontMatter:()=>r,metadata:()=>c,toc:()=>s});var a=n(7462),l=(n(7294),n(3905));const r={hide_table_of_contents:!0},i="Using Multicall",c={unversionedId:"Developers/SDK/Multicall",id:"Developers/SDK/Multicall",title:"Using Multicall",description:"Overview",source:"@site/docs/Developers/SDK/Multicall.md",sourceDirName:"Developers/SDK",slug:"/Developers/SDK/Multicall",permalink:"/cn/Developers/SDK/Multicall",draft:!1,tags:[],version:"current",frontMatter:{hide_table_of_contents:!0},sidebar:"myAutogeneratedSidebar",previous:{title:"Advanced Operations using the SDK",permalink:"/cn/Developers/SDK/AdvancedSDKOps"},next:{title:"Error Handling",permalink:"/cn/Developers/SDK/ErrorHandling"}},o={},s=[{value:"Overview",id:"overview",level:2},{value:"Usage",id:"usage",level:2},{value:"Multicall Creation",id:"multicall-creation",level:3},{value:"Calling Contract Methods",id:"calling-contract-methods",level:3},{value:"Result Caching",id:"result-caching",level:3},{value:"Have the user decide whether to use Multicall",id:"have-the-user-decide-whether-to-use-multicall",level:3},{value:"Using <code>Multicall</code> with <code>Router</code>",id:"using-multicall-with-router",level:2}],u={toc:s},p="wrapper";function d(e){let{components:t,...n}=e;return(0,l.kt)(p,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"using-multicall"},"Using Multicall"),(0,l.kt)("h2",{id:"overview"},"Overview"),(0,l.kt)("p",null,"Multicall is the preferred way to call contract methods and get hypothetical results. The Pendle SDK has integrated ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/makerdao/multicall"},"Multicall")," (from MakerDAO) as a core component. Our multicall component is designed so that it is compatible with ",(0,l.kt)("a",{parentName:"p",href:"https://docs.ethers.org/v5/api/contract/contract/"},"ethers.js\u2019 Contract"),", as well as our own component, can be used everywhere comfortably, but users also have the option to opt-out of using it if they don't want to."),(0,l.kt)("h2",{id:"usage"},"Usage"),(0,l.kt)("h3",{id:"multicall-creation"},"Multicall Creation"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"import { Multicall } from '@pendle/sdk-v2';\nimport { provider } from './sdk-doc-playground.mjs';\n\nconst chainId = 1; // 1 for ethereum\n\nconst multicall = new Multicall({ chainId, provider });\n")),(0,l.kt)("p",null,"Multicall accepts 2 required parameters in its configuration, which are:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"chainId: ChainId")," \u2014 the ID of the chain to use multicall with. See ",(0,l.kt)("inlineCode",{parentName:"li"},"ChainId")," type in ",(0,l.kt)("a",{parentName:"li",href:"/cn/Developers/SDK/TypesAndFunctions"},"Types and Functions"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"provider: Provider")," \u2014 the connection to the network.")),(0,l.kt)("p",null,"Additionally, it accepts the following optional parameters:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"callLimit: number = 64")," \u2014 the maximum number of ",(0,l.kt)("em",{parentName:"li"},"calls")," to be included in a ",(0,l.kt)("em",{parentName:"li"},"multicall"),".")),(0,l.kt)("h3",{id:"calling-contract-methods"},"Calling Contract Methods"),(0,l.kt)("p",null,"To use multicall with ethres.js' contract, first wrap it, then call it with ",(0,l.kt)("inlineCode",{parentName:"p"},"callStatic")," (which is the only method)."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"import { PendleERC20, PendleERC20ABI, Address } from '@pendle/sdk-v2';\nimport { Contract } from 'ethers';\n\n// an ERC20 contract object\nconst USDCAddress = '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48';\nconst contract = new Contract(USDCAddress, PendleERC20ABI, provider) as PendleERC20;\n\nconst contractWithMulticall = multicall.wrap(contract);\n\nasync function singleCall(userAddress: Address) {\n    return await contractWithMulticall.callStatic.balanceOf(userAddress);\n}\n")),(0,l.kt)("p",null,"To test the ",(0,l.kt)("inlineCode",{parentName:"p"},"singleCall")," function, we should pass in some addresses. Some interesting addresses can be taken from ",(0,l.kt)("a",{parentName:"p",href:"https://etherscan.io/token/0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48#balances"},"Etherscan's USDC holders page"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"import { toAddress } from '@pendle/sdk-v2';\n\nconst USDC_HOLDERS = {\n    'Maker: PSM-USDC-A': toAddress('0x0a59649758aa4d66e25f08dd01271e891fe52199'),\n    'Polygon (Matic): ERC20 Bridge': toAddress('0x40ec5b33f54e0e8a33a975908c5ba1c14e5bbbdf'),\n    'Arbitrum One: L1 Arb - Custom Gateway': toAddress(\n        '0xcee284f754e854890e311e3280b767f80797180d'\n    ),\n    'Binance 14': toAddress('0x28c6c06298d514db089934071355e5743bf21d60'),\n} as const;\n")),(0,l.kt)("p",null,"Now to test our function."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"console.log(await singleCall(USDC_HOLDERS['Maker: PSM-USDC-A']));\n")),(0,l.kt)("p",null,"Output:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},'BigNumber { value: "431722858735941" }\n')),(0,l.kt)("p",null,"To have the ",(0,l.kt)("em",{parentName:"p"},"batching")," effect, use it with ",(0,l.kt)("inlineCode",{parentName:"p"},"Promise.all"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"async function multicallCall(userAddresses: Address[]) {\n    return await Promise.all(\n        userAddresses.map((userAddress) => contractWithMulticall.callStatic.balanceOf(userAddress))\n    );\n}\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"import { zip } from '@pendle/sdk-v2';\n\nconst balances = await multicallCall(Object.values(USDC_HOLDERS));\nfor (const [holder, balance] of zip(Object.keys(USDC_HOLDERS), balances)) {\n    console.log(`${holder} is holding ${String(balance)} USDC`);\n}\n")),(0,l.kt)("p",null,"Output:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"Maker: PSM-USDC-A is holding 431722858735941 USDC\nPolygon (Matic): ERC20 Bridge is holding 605658369590959 USDC\nArbitrum One: L1 Arb - Custom Gateway is holding 1120124145728251 USDC\nBinance 14 is holding 184384382500926 USDC\n")),(0,l.kt)("p",null,"You can even use ",(0,l.kt)("inlineCode",{parentName:"p"},"singleCall")," for batching."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"async function multicallCall2(userAddresses: Address[]) {\n    return await Promise.all(userAddresses.map(singleCall));\n}\n")),(0,l.kt)("h3",{id:"result-caching"},"Result Caching"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Multicall#wrap")," will only wrap each contract ",(0,l.kt)("em",{parentName:"p"},"once"),". If the same contract is called with the same multicall instance, the cached result will be returned. The cached result is stored in ",(0,l.kt)("inlineCode",{parentName:"p"},"Multicall#cacheWrappedContract")," weakMap. To access the cached result, you can get from the ",(0,l.kt)("inlineCode",{parentName:"p"},"cacheWrappedContract")," weakMap of the ",(0,l.kt)("inlineCode",{parentName:"p"},"multicall")," instance. For example, we can get the cache result of the above USDC ",(0,l.kt)("inlineCode",{parentName:"p"},"contract")," instance as follows:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"// this will not wrap the contract again, but return the cached result\nconst cachedResult = multicall.wrap(contract); \nconsole.log(multicall.wrap(contract) === cachedResult);\n")),(0,l.kt)("p",null,"Output:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"true\n")),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},"The ",(0,l.kt)("inlineCode",{parentName:"p"},"Multicall#multicallStaticSymbol")," is not ",(0,l.kt)("em",{parentName:"p"},"static"),". It is local to each ",(0,l.kt)("inlineCode",{parentName:"p"},"multicall")," instance.")),(0,l.kt)("h3",{id:"have-the-user-decide-whether-to-use-multicall"},"Have the user decide whether to use Multicall"),(0,l.kt)("p",null,"We can also have the user decide whether to use Multicall using ",(0,l.kt)("inlineCode",{parentName:"p"},"Multicall.wrap")," function, that accepts an optional parameter ",(0,l.kt)("inlineCode",{parentName:"p"},"Multicall?"),". If it is undefined, the calling method will act just like ",(0,l.kt)("inlineCode",{parentName:"p"},"callStatic"),". That is, no multicall."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"async function singleCallOptional(userAddress: Address, multicall?: Multicall) {\n    return await Multicall.wrap(contract, multicall).callStatic.balanceOf(userAddress);\n}\n\nasync function multicallCallOptional(userAddresses: Address[], multicall?: Multicall) {\n    return await Promise.all(\n        userAddresses.map((userAddress) => singleCallOptional(userAddress, multicall))\n    );\n}\n\n// have batching\nconst balances1 = await multicallCallOptional(Object.values(USDC_HOLDERS), multicall);\n// no batching\nconst balances2 = await multicallCallOptional(Object.values(USDC_HOLDERS));\n\nconsole.log(balances1);\nconsole.log(balances2);\n")),(0,l.kt)("p",null,"Output:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},'[\n  BigNumber { value: "431722858735941" },\n  BigNumber { value: "605658369590959" },\n  BigNumber { value: "1120124145728251" },\n  BigNumber { value: "184384382500926" }\n]\n[\n  BigNumber { value: "431722858735941" },\n  BigNumber { value: "605658369590959" },\n  BigNumber { value: "1120124145728251" },\n  BigNumber { value: "184384382500926" }\n]\n')),(0,l.kt)("h2",{id:"using-multicall-with-router"},"Using ",(0,l.kt)("inlineCode",{parentName:"h2"},"Multicall")," with ",(0,l.kt)("inlineCode",{parentName:"h2"},"Router")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"multicall")," can be passed to the Pendle SDK's ",(0,l.kt)("inlineCode",{parentName:"p"},"Router")," as follows:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"import { Router } from '@pendle/sdk-v2';\nimport { testAccounts } from './sdk-doc-playground.mjs';\nconst router = Router.getRouter({\n    chainId: 1,\n    provider,\n    signer: testAccounts[0].wallet,\n\n    multicall, // pass multicall here\n});\n")),(0,l.kt)("p",null,"It is ",(0,l.kt)("strong",{parentName:"p"},"advisable")," to pass Multicall into Pendle SDK ",(0,l.kt)("inlineCode",{parentName:"p"},"Router")," so\nthat it can take advantages of the intermediate calculation."))}d.isMDXComponent=!0}}]);