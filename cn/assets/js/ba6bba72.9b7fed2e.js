"use strict";(self.webpackChunkpendle_documentation=self.webpackChunkpendle_documentation||[]).push([[9195],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>v});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var i=n.createContext({}),p=function(e){var t=n.useContext(i),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},c=function(e){var t=p(e.components);return n.createElement(i.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(a),m=r,v=u["".concat(i,".").concat(m)]||u[m]||d[m]||o;return a?n.createElement(v,l(l({ref:t},c),{},{components:a})):n.createElement(v,l({ref:t},c))}));function v(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,l=new Array(o);l[0]=m;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s[u]="string"==typeof e?e:r,l[1]=s;for(var p=2;p<o;p++)l[p]=a[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},526:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var n=a(7462),r=(a(7294),a(3905));const o={hide_table_of_contents:!0},l="Adding and Removing Liquidity",s={unversionedId:"Developers/SDK/AddingAndRemovingLiquidity",id:"Developers/SDK/AddingAndRemovingLiquidity",title:"Adding and Removing Liquidity",description:"Add liquidity",source:"@site/docs/Developers/SDK/AddingAndRemovingLiquidity.md",sourceDirName:"Developers/SDK",slug:"/Developers/SDK/AddingAndRemovingLiquidity",permalink:"/cn/Developers/SDK/AddingAndRemovingLiquidity",draft:!1,tags:[],version:"current",frontMatter:{hide_table_of_contents:!0},sidebar:"myAutogeneratedSidebar",previous:{title:"Router",permalink:"/cn/Developers/SDK/Router"},next:{title:"PT and YT Trading",permalink:"/cn/Developers/SDK/PTAndYTTrading"}},i={},p=[{value:"Add liquidity",id:"add-liquidity",level:2},{value:"Step 1. Verify your balances before zap",id:"step-1-verify-your-balances-before-zap",level:4},{value:"Step 2. Approve the router",id:"step-2-approve-the-router",level:4},{value:"Step 3. Make a transaction",id:"step-3-make-a-transaction",level:4},{value:"Step 4. Verify your balances after zap",id:"step-4-verify-your-balances-after-zap",level:4},{value:"Remove liquidity",id:"remove-liquidity",level:2},{value:"Step 1. Verify your balances before exit",id:"step-1-verify-your-balances-before-exit",level:4},{value:"Step 2. Approve the router",id:"step-2-approve-the-router-1",level:4},{value:"Step 3. Initiate a transaction",id:"step-3-initiate-a-transaction",level:4},{value:"Step 4. Verify your balances after exit",id:"step-4-verify-your-balances-after-exit",level:4}],c={toc:p},u="wrapper";function d(e){let{components:t,...a}=e;return(0,r.kt)(u,(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"adding-and-removing-liquidity"},"Adding and Removing Liquidity"),(0,r.kt)("h2",{id:"add-liquidity"},"Add liquidity"),(0,r.kt)("p",null,"Suppose that we want to add liquidity to the ",(0,r.kt)("a",{parentName:"p",href:"https://app.pendle.finance/pro/pools/0xc374f7ec85f8c7de3207a10bb1978ba104bda3b2/zap/in?chain=ethereum"},"PT stETH Pool")," with 10 ETH."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { toAddress, BN, createERC20, NATIVE_ADDRESS_0x00 } from '@pendle/sdk-v2';\nconst marketAddress = toAddress('0xc374f7ec85f8c7de3207a10bb1978ba104bda3b2');\n\n// Pendle SDK `createERC20` can provide the same functionality of an ERC20\n// to native token (ETH).\nconst ethWrappedERC20 = createERC20(NATIVE_ADDRESS_0x00, {\n    chainId: 1, // ethereum chain\n    provider,\n    signer: testAccounts[0].wallet,\n});\nconst ETH_DECIMALS = BN.from(10).pow(await ethWrappedERC20.decimals());\nconst amountETHToZapIn = ETH_DECIMALS.mul(10);\n")),(0,r.kt)("p",null,"Here is how we can do it:"),(0,r.kt)("h4",{id:"step-1-verify-your-balances-before-zap"},"Step 1. Verify your balances before zap"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { MarketEntity } from '@pendle/sdk-v2';\nconst marketContract = new MarketEntity(marketAddress, {\n    chainId: 1,\n    provider,\n    signer: testAccounts[0].wallet,\n});\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"{\n    const lpBalance = await marketContract.balanceOf(testAccounts[0].address);\n    const ethBalance = await ethWrappedERC20.balanceOf(testAccounts[0].address);\n    console.log('Balances before zap', { lpBalance, ethBalance });\n}\n")),(0,r.kt)("p",null,"Output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'Balances before zap: {\n  lpBalance: BigNumber { value: "7415056052395711065" },\n  ethBalance: BigNumber { value: "9959796037708252906401" }\n}\n')),(0,r.kt)("h4",{id:"step-2-approve-the-router"},"Step 2. Approve the router"),(0,r.kt)("p",null,"Since we are using ETH, we ",(0,r.kt)("strong",{parentName:"p"},"do not")," actually need to approve. However, since ",(0,r.kt)("inlineCode",{parentName:"p"},"createERC20")," wraps native tokens the same way as a normal ERC20, we can still do as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"await ethWrappedERC20.approve(router.address, amountETHToZapIn).then((tx) => tx?.wait());\nconsole.log(\n    'Approved amount:',\n    await ethWrappedERC20.allowance(testAccounts[0].address, router.address)\n);\n")),(0,r.kt)("p",null,"Output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'Approved amount: BigNumber {\n    value: "115792089237316195423570985008687907853269984665640564039457584007913129639935"\n}\n')),(0,r.kt)("p",null,"The result is ",(0,r.kt)("inlineCode",{parentName:"p"},"2^256 - 1"),". As stated above, this is a ",(0,r.kt)("em",{parentName:"p"},"wrapped")," process."),(0,r.kt)("p",null,"For the other ERC20 tokens, the process is similar."),(0,r.kt)("h4",{id:"step-3-make-a-transaction"},"Step 3. Make a transaction"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const slippage = 0.2 / 100;\nconst tokenInAddress = NATIVE_ADDRESS_0x00;\nconst amountTokenIn = amountETHToZapIn;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const zapInTx = await router.addLiquiditySingleToken(\n    marketAddress,\n    tokenInAddress,\n    amountTokenIn,\n    slippage\n);\n\nawait zapInTx.wait();\n")),(0,r.kt)("h4",{id:"step-4-verify-your-balances-after-zap"},"Step 4. Verify your balances after zap"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"{\n    const lpBalance = await marketContract.balanceOf(testAccounts[0].address);\n    const ethBalance = await testAccounts[0].wallet.getBalance();\n    console.log('Balances after zap', { lpBalance, ethBalance });\n}\n")),(0,r.kt)("p",null,"Output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'Balances after zap {\n  lpBalance: BigNumber { value: "12358477257712936422" },\n  ethBalance: BigNumber { value: "9949795341003257331395" }\n}\n')),(0,r.kt)("h2",{id:"remove-liquidity"},"Remove liquidity"),(0,r.kt)("p",null,"Now suppose we want to remove the liquidity and exit to ",(0,r.kt)("a",{parentName:"p",href:"https://etherscan.io/address/0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84"},"stETH"),"."),(0,r.kt)("p",null,"Here is how to do it:"),(0,r.kt)("h4",{id:"step-1-verify-your-balances-before-exit"},"Step 1. Verify your balances before exit"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const stEthContract = createERC20(toAddress('0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84'), {\n    chainId: 1,\n    provider,\n    signer: testAccounts[0].wallet,\n});\n\n// we remove all LP to stEth.\nconst lpToRemove = await marketContract.balanceOf(testAccounts[0].address);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"{\n    const lpBalance = lpToRemove;\n    const stEthBalance = await stEthContract.balanceOf(testAccounts[0].address);\n    console.log('Balances before exit', { lpBalance, stEthBalance });\n}\n")),(0,r.kt)("p",null,"Output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'Balances before exit {\n  lpBalance: BigNumber { value: "12358477257712936422" },\n  stEthBalance: BigNumber { value: "24974694703001963936" }\n}\n')),(0,r.kt)("h4",{id:"step-2-approve-the-router-1"},"Step 2. Approve the router"),(0,r.kt)("p",null,"Note that we need to approve with the PENDLE-LPT market contract, not the stETH contract."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const zapOutApproval = await marketContract.approve(router.address, lpToRemove);\nawait zapOutApproval.wait();\nconsole.log('Approved amount:', marketContract.allowance(testAccounts[0].address, router.address));\n")),(0,r.kt)("p",null,"Output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"Approved amount: Promise { <pending> }\n")),(0,r.kt)("h4",{id:"step-3-initiate-a-transaction"},"Step 3. Initiate a transaction"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const tokenOutAddress = stEthContract.address;\nconst zapOutTx = await router.removeLiquiditySingleToken(\n    marketAddress,\n    lpToRemove,\n    tokenOutAddress,\n    slippage\n);\n\nawait zapOutTx.wait();\n")),(0,r.kt)("h4",{id:"step-4-verify-your-balances-after-exit"},"Step 4. Verify your balances after exit"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"{\n    const lpBalance = await marketContract.balanceOf(testAccounts[0].address);\n    const stEthBalance = await stEthContract.balanceOf(testAccounts[0].address);\n    console.log('Balances after exit', { lpBalance, stEthBalance });\n}\n")),(0,r.kt)("p",null,"Output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'Balances after exit {\n  lpBalance: BigNumber { value: "0" },\n  stEthBalance: BigNumber { value: "49949397129142156720" }\n}\n')))}d.isMDXComponent=!0}}]);